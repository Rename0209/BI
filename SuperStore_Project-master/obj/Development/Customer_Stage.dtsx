<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/19/2023 3:56:43 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CLOUD"
  DTS:CreatorName="CLOUD\ndvannhi"
  DTS:DTSID="{52D953A5-2117-42AF-A0CE-B7C48CD901FB}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1066"
  DTS:ObjectName="Customer_Stage"
  DTS:PackageType="5"
  DTS:VersionBuild="43"
  DTS:VersionGUID="{26ADD765-A8F0-4F81-92F5-ABA8B4C8D027}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F8776A39-1C89-4671-9886-CCFC5F274B1E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LSET_read">
      <DTS:VariableValue
        DTS:DataType="7">1/1/2002</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{37B19BD0-0FA6-4A42-9AA8-585443F80B75}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="LSET_segment"
      DTS:ObjectName="Variable">
      <DTS:VariableValue
        DTS:DataType="7">1/1/2002</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Customer"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{2BBF5972-BF3D-41B1-9EC0-3AE8811F1462}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Customer">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Customer\Customer to Stage"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{E4E2DED3-9E91-4E7A-8163-E8490669C1D2}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Customer to Stage"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Customer\Customer to Stage\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1].Columns[Customer Name]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer Name"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer Name]" />
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1].Columns[Customer ID]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer ID"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer ID]" />
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]" />
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1].Columns[Order Date]"
                          cachedDataType="dbDate"
                          cachedName="Order Date"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer Name]"
                          name="Customer Name">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer Name]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer ID]"
                          name="Customer ID">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer ID]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]"
                          name="Segment">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Order Date]"
                          dataType="dbDate"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Order Date]"
                          name="Order Date">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input].Columns[Order Date]"
                          cachedDataType="dbDate"
                          cachedName="Order Date"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Load]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Load"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">([YEAR](#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [YEAR](@[User::LSET_read])) &amp;&amp; ([MONTH](#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [MONTH](@[User::LSET_read])) &amp;&amp; ([DAY](#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [DAY](@[User::LSET_read]))</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">(YEAR([Order Date]) &gt;= YEAR(@[User::LSET_read])) &amp;&amp; (MONTH([Order Date]) &gt;= MONTH(@[User::LSET_read])) &amp;&amp; (DAY([Order Date]) &gt;= DAY(@[User::LSET_read]))</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Conditional Split 1"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split 1"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input].Columns[IDRow]"
                          cachedDataType="i4"
                          cachedName="IDRow"
                          lineageId="Package\Customer\Customer to Stage\Script Component.Outputs[Output 0].Columns[IDRow]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Case 1]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Case 1"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">#{Package\Customer\Customer to Stage\Script Component.Outputs[Output 0].Columns[IDRow]} == 1</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">IDRow == 1</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Data Conversion"
                  componentClassID="Microsoft.DataConvert"
                  contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Data Conversion"
                  name="Data Conversion"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Data Conversion.Inputs[Data Conversion Input]"
                      name="Data Conversion Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Data Conversion.Inputs[Data Conversion Input].Columns[Order Date]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Order Date"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Order Date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Output]"
                      exclusionGroup="1"
                      name="Data Conversion Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrder Date]"
                          dataType="dbDate"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrder Date]"
                          name="DOrder Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Order Date]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Data Conversion Error Output"
                      synchronousInputId="Package\Customer\Customer to Stage\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Excel Source"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Excel Source"
                  name="Excel Source"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">Sheet1$</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mapping from parameters in the SQL command to variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Customer\Customer to Stage\Excel Source.Connections[OleDbConnection]"
                      connectionManagerID="{9C64B909-94C3-4468-B2F6-0D37BED0FBAD}:external"
                      connectionManagerRefId="Project.ConnectionManagers[Global_SS_Excel]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output]"
                      name="Excel Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer ID]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Customer ID]"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer ID]"
                          name="Customer ID"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer Name]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Customer Name]"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer Name]"
                          name="Customer Name"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Segment]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Segment]"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Segment]"
                          name="Segment"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Order Date]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Order Date]"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Order Date]"
                          name="Order Date"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Row ID]"
                          dataType="r8"
                          name="Row ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Order ID]"
                          dataType="wstr"
                          length="255"
                          name="Order ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Order Date]"
                          dataType="wstr"
                          length="255"
                          name="Order Date" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Ship Date]"
                          dataType="wstr"
                          length="255"
                          name="Ship Date" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Ship Mode]"
                          dataType="wstr"
                          length="255"
                          name="Ship Mode" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          name="Customer ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          name="Customer Name" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Segment]"
                          dataType="wstr"
                          length="255"
                          name="Segment" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="255"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[State]"
                          dataType="wstr"
                          length="255"
                          name="State" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="255"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Postal Code]"
                          dataType="r8"
                          name="Postal Code" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Market]"
                          dataType="wstr"
                          length="255"
                          name="Market" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="255"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Product ID]"
                          dataType="wstr"
                          length="255"
                          name="Product ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Category]"
                          dataType="wstr"
                          length="255"
                          name="Category" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Sub-Category]"
                          dataType="wstr"
                          length="255"
                          name="Sub-Category" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Product Name]"
                          dataType="wstr"
                          length="255"
                          name="Product Name" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Sales]"
                          dataType="r8"
                          name="Sales" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Quantity]"
                          dataType="r8"
                          name="Quantity" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Discount]"
                          dataType="r8"
                          name="Discount" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Profit]"
                          dataType="r8"
                          name="Profit" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Shipping Cost]"
                          dataType="r8"
                          name="Shipping Cost" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].ExternalColumns[Order Priority]"
                          dataType="wstr"
                          length="255"
                          name="Order Priority" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output]"
                      isErrorOut="true"
                      name="Excel Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Customer ID]"
                          name="Customer ID" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Customer Name]"
                          name="Customer Name" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Segment]"
                          name="Segment" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Order Date]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Error Output].Columns[Order Date]"
                          name="Order Date" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Flat File Source"
                  componentClassID="Microsoft.FlatFileSource"
                  contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Source"
                  localeId="1033"
                  name="Flat File Source"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether zero-length columns are treated as null."
                      name="RetainNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                      name="FileNameColumnName"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Customer\Customer to Stage\Flat File Source.Connections[FlatFileConnection]"
                      connectionManagerID="{4D5A124D-F720-4EAD-9B22-D3CA95CA232A}:external"
                      connectionManagerRefId="Project.ConnectionManagers[US_SS_csv]"
                      name="FlatFileConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output]"
                      name="Flat File Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Customer ID]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer ID]"
                          length="50"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Customer ID]"
                          name="Customer ID"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Customer Name]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer Name]"
                          length="50"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Customer Name]"
                          name="Customer Name"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Segment]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Segment]"
                          length="50"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Segment]"
                          name="Segment"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Order Date]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order Date]"
                          length="50"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Order Date]"
                          name="Order Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Row ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Row ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Order ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order Date]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Order Date" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Ship Date]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Ship Date" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Ship Mode]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Ship Mode" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Customer ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer Name]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Customer Name" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Segment]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Segment" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Country]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[City]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[State]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="State" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Postal Code]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Postal Code" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Region]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Product ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Product ID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Category]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Category" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Sub-Category]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Sub-Category" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Product Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Product Name" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Sales]"
                          dataType="r8"
                          name="Sales" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Quantity]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Quantity" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Discount]"
                          dataType="r8"
                          name="Discount" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Profit]"
                          dataType="r8"
                          name="Profit" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output]"
                      isErrorOut="true"
                      name="Flat File Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          codePage="1252"
                          dataType="text"
                          description="Flat File Source Error Output Column"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          name="Flat File Source Error Output Column" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Customer]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Customer\Customer to Stage\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Segment]"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Segment]" />
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Customer ID]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer ID"
                          cachedSortKeyPosition="-1"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CustomerID]"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer ID]" />
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Customer Name]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer Name"
                          externalMetadataColumnId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CustomerName]"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer Name]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CustomerID]"
                          dataType="wstr"
                          length="255"
                          name="CustomerID" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CustomerName]"
                          dataType="wstr"
                          length="255"
                          name="CustomerName" />
                        <externalMetadataColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Segment]"
                          dataType="wstr"
                          length="255"
                          name="Segment" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }
    int rowNumber = 1;
    string lastID = null;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        if (lastID == null || lastID != Row.CustomerID)
        {
            rowNumber = 1;
            lastID = Row.CustomerID;
        }
        else
        {
            rowNumber++;
        }

        Row.IDRow = rowNumber;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String CustomerID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool CustomerID_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int32 IDRow
    {
        set
        {
            this[1] = value;
        }
    }
    public bool IDRow_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Settings.get_Default():SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Sett" +
    "ings")]

namespace SC_303a504a8be149688e6e4b8e70f65cb8.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_303a504a8be149688e6e4b8e70f65cb8.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8538f13f-c52e-47f4-a7cf-81906102f37a}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_303a504a8be149688e6e4b8e70f65cb8</RootNamespace>
    <AssemblyName>SC_834E64C170B84D3FAB675C804E36DCDA</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_303a504a8be149688e6e4b8e70f65cb8" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_303a504a8be149688e6e4b8e70f65cb8</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_303a504a8be149688e6e4b8e70f65cb8</msb:DisplayName>
    <msb:ProjectId>{DD1867BD-53A9-4753-ACEA-8B1AE285DBE8}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_303a504a8be149688e6e4b8e70f65cb8.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_303a504a8be149688e6e4b8e70f65cb8")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_303a504a8be149688e6e4b8e70f65cb8")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_303a504a8be149688e6e4b8e70f65cb8.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_303a504a8be149688e6e4b8e70f65cb8.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_834E64C170B84D3FAB675C804E36DCDA.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEhlgWUAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAALjIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANwxAABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAANBIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAQ
MgAAAAAAAEgAAAACAAUA/CEAACgPAAABAAAAAAAAACQxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAMASwAAAAAAAAACewIAAAQs
EwJ7AgAABANvBgAABigSAAAKLBUCF30BAAAEAgNvBgAABn0CAAAEKw4CAnsBAAAEF1h9AQAABAMC
ewEAAARvCAAABio6Ahd9AQAABAIoDAAABioqAgMEBSgTAAAKKlICexQAAAoCexUAAAoWlG8WAAAK
KiICFigXAAAKKjoCFwOMGwAAASgYAAAKKloDLAgCFygZAAAKKnIBAABwcxoAAAp6HgIoGwAACioe
AigcAAAKKn4CKB0AAAoCAnMQAAAGfQMAAAQCAnMRAAAGfQQAAAQqkgRyngAAcBpvHgAACiwVAgUC
AygfAAAKDgRzBQAABm8OAAAGKkorBwIDbw8AAAYDbwoAAAYt8SoGKjoCKCAAAAoCA30FAAAEKjoC
KCAAAAoCA30GAAAEKh4CKCAAAAoqrn4HAAAELR5yrgAAcNAHAAACKCEAAApvIgAACnMjAAAKgAcA
AAR+BwAABCoafggAAAQqHgKACAAABCoafgkAAAQqHgIoJAAACioucxcAAAaACQAABCoAQlNKQgEA
AQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAfAUAACN+AADoBQAAXAYAACNTdHJpbmdzAAAA
AEQMAAAgAQAAI1VTAGQNAAAQAAAAI0dVSUQAAAB0DQAAtAEAACNCbG9iAAAAAAAAAAIAAAFXFaAB
CQEAAAD6ATMAFgAAAQAAACAAAAAIAAAACQAAABgAAAAPAAAAJAAAABAAAAADAAAABwAAAAgAAAAB
AAAABAAAAAEAAAAAAAkDAQAAAAAABgAAAnkEBgCUAnkEBgBMAWYEDwDtBAAABgB5AbEDBgDjAbED
BgDEAbEDBgB7ArEDBgAgArEDBgA5ArEDBgCQAbEDBgCrAc8CCgBUApkACgA4BJkADgApBJkACgD6
A5kACgCzBZkABgB2BWkDBgAvAWYEBgBJBJkEBgDuA5wDEgD/APMCEgBgAfMCEgDnAIcDBgAUAXkE
BgDsAmkDBgABAGkDBgDDA2kDBgDdA2kDBgC6AGkDBgBrAGkDBgBCBrEDAAAAAAcAAAAAAAEAAQAB
ABAAfAMAABAAAQABAAEAEAAcBAAAOQADAAUAAQAQAJUFAABFAAMADAABABAAagUAAEkABQAQAAEA
EAArBQAASQAGABEAAAAQAKAE/ARJAAcAEgAAARAAWgX8BGEACQAWAAEAEgR7AAEAQwB+AAYAagWB
AAYAKwWFAAEAowWJAAEAowWJABEAcAONABEA1wCRABEAWwCVAFAgAAAAAMYAsgIGAAEAWCAAAAAA
xgC9AgYAAQBgIAAAAADGAB8GmQABALcgAAAAAIYYWQQGAAIAxiAAAAAAhhhZBCEAAgDRIAAAAACG
CDQAnwAFAOYgAAAAAIYIMQNDAAUA7yAAAAAAhggVBgEABQD+IAAAAACGCEcDowAGABUhAAAAAIYA
NgZDAAcAHSEAAAAAhgB9BUMABwAlIQAAAACGGFkEBgAHAEUhAAAAAMYACAaoAAcAaiEAAAAAxgEB
BpkACwB9IQAAAADGAR8GmQAMAH8hAAAAAIYYWQSyAA0AjiEAAAAAhhhZBLIADgCdIQAAAACDGFkE
BgAPAKUhAAAAAJMIRQS4AA8A0SEAAAAAkwi/AL0ADwDYIQAAAACTCMsAwgAPAOAhAAAAAJYIiQXI
ABAA5yEAAAAAhhhZBAYAEADvIQAAAACRGF8EzQAQAAAAAQA6BgAAAQA+BAAAAgA1BQAAAwAIBAAA
AQDJAgAAAQDJAgAAAQBKAAAAAgCPAAAAAwA+BAAABAAIBAAAAQA+BAAAAQA6BgAAAQC5BQAAAQC5
BQAAAQDJAgkAWQQBABEAWQQGABkAWQQKACkAWQQQADEAWQQQADkAWQQQAEEAWQQQAEkAWQQQAFEA
WQQQAFkAWQQQAGEAWQQQAGkAWQQGAJkAWQQGALkAWQQVAMkAWQQGAIkAsgIGAIkAvQIGANEASwYb
AHEAWQQhAHEAPgQrAHEANQUvAHkA6QIzAHEAUQM4AHEAYAM9AHEAWAMBAOEAWQQQAHEANgZDAHEA
fQVDAIkAWQQGANEAYwVHAIkASQVOAJEAWQQGAPEAfQBUAPEAPgZbAKEAWQRhAMEAWQQGAC4ACwDs
AC4AEwD1AC4AGwAUAS4AIwAdAS4AKwBGAS4AMwBGAS4AOwBGAS4AQwAdAS4ASwBMAS4AUwBGAS4A
WwBjAUMAYwCtAakAcwAUAckAcwAUAeMAawCtASEBewCtAQMAAQAHAAUACAAHAAAAOADRAAAANQPV
AAAAGQbZAAAASwPVAAAASQTdAAAA3wDiAAAAjQXnAAIABgADAAIABwAFAAEACAAHAAEACQAJAAIA
EwALAAIAFAANAAEAFQANAAIAFgAPAASAAAABAAAAAAAAAAAAAAAAABAAAAAEAAAAAAAAAAAAAABp
AFIAAAAAABAAAAAAAAAAAAAAAHIAwwUAAAAAEAAAAAAAAAAAAAAAcgDgBQAAAAAEAAAAAAAAAAAA
AABpAGkDAAAAAAAAAAABAAAAqgQAAAAAAEludDMyADxNb2R1bGU+AFNDXzgzNEU2NEMxNzBCODRE
M0ZBQjY3NUM4MDRFMzZEQ0RBAGdldF9DdXN0b21lcklEAGxhc3RJRABJbnB1dElEAG1zY29ybGli
AGRlZmF1bHRJbnN0YW5jZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBJbnB1
dE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9y
QnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2Vy
Q29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0
ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdl
dEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFz
c2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2Ny
aXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQB2YWx1
ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAEdldFN0cmluZwBTeXN0ZW0uQ29tcG9uZW50TW9k
ZWwAU0NfODM0RTY0QzE3MEI4NEQzRkFCNjc1QzgwNEUzNkRDREEuZGxsAGdldF9DdXN0b21lcklE
X0lzTnVsbABzZXRfSURSb3dfSXNOdWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAHJlc291cmNl
TWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24A
U3lzdGVtLlJlZmxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTdHJpbmdDb21wYXJp
c29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAHJvd051bWJlcgBJbnB1dDBC
dWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIALmN0
b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZp
Y2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMzAzYTUwNGE4YmUxNDk2ODhlNmU0YjhlNzBmNjVjYjgu
UHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNDXzMwM2E1MDRh
OGJlMTQ5Njg4ZTZlNGI4ZTcwZjY1Y2I4LlByb3BlcnRpZXMAVmFyaWFibGVzAEJ1ZmZlckNvbHVt
bkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2Jq
ZWN0AEVuZE9mUm93c2V0AGdldF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50
AFNjcmlwdENvbXBvbmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAc2V0X0lEUm93AElucHV0
MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkAb3BfSW5lcXVhbGl0eQAAAAAA
gJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBl
AHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQA
bwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAw
AABxUwBDAF8AMwAwADMAYQA1ADAANABhADgAYgBlADEANAA5ADYAOAA4AGUANgBlADQAYgA4AGUA
NwAwAGYANgA1AGMAYgA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAB0rQrqk8l2QKQ0UT21O420AAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFZBQACAg4OCSADARI9
HQgSQQMGEj0DBh0IBCABDggEIAECCAUgAgEIHAMgAAIGIAICDhF1BSABHQgIBgABEnkRfQUgABKA
gQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRAgYIAgYOAwYSFAMGEhgDBhJFAwYSUQMGElUDBhIg
BSABARIMAyAADgQgAQECCSAEAQgOEj0SQQUgAQESRQQAABJRBAAAElUFAAEBElUEAAASIAMAAAED
KAAOAygAAgMoAAgECAASUQQIABJVBAgAEiAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRp
b25UaHJvd3MBCAEAAgAAAAAAKAEAI1NDXzMwM2E1MDRhOGJlMTQ5Njg4ZTZlNGI4ZTcwZjY1Y2I4
AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjMAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249
djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43BAEAAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAAAEMgAAAAAAAAAAAAAeMgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDIAAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAADsAwAAAAAAAAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAETAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAA
AABTAEMAXwAzADAAMwBhADUAMAA0AGEAOABiAGUAMQA0ADkANgA4ADgAZQA2AGUANABiADgAZQA3
ADAAZgA2ADUAYwBiADgAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4A
MAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADgAMwA0AEUANgA0
AEMAMQA3ADAAQgA4ADQARAAzAEYAQQBCADYANwA1AEMAOAAwADQARQAzADYARABDAEQAQQAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMgAzAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMA
AAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AOAAz
ADQARQA2ADQAQwAxADcAMABCADgANABEADMARgBBAEIANgA3ADUAQwA4ADAANABFADMANgBEAEMA
RABBAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfADMAMAAz
AGEANQAwADQAYQA4AGIAZQAxADQAOQA2ADgAOABlADYAZQA0AGIAOABlADcAMABmADYANQBjAGIA
OAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4
AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAMDIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_834e64c170b84d3fab675c804e36dcda</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">B7</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Script Component.Inputs[Input 0].Columns[Customer ID]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer ID"
                          cachedSortKeyPosition="-1"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer ID]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Customer\Customer to Stage\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Script Component.Outputs[Output 0].Columns[IDRow]"
                          dataType="i4"
                          lineageId="Package\Customer\Customer to Stage\Script Component.Outputs[Output 0].Columns[IDRow]"
                          name="IDRow" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input].Columns[Customer Name]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer Name"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer Name]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input].Columns[Customer ID]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer ID"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer ID]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">-1</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input].Columns[Order Date]"
                          cachedDataType="dbDate"
                          cachedName="Order Date"
                          lineageId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Order Date]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">-2</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer Name]"
                          name="Customer Name">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer Name]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Customer ID]"
                          name="Customer ID"
                          sortKeyPosition="-1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Customer ID]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Segment]"
                          name="Segment">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Order Date]"
                          dataType="dbDate"
                          lineageId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output].Columns[Order Date]"
                          name="Order Date"
                          sortKeyPosition="-2">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Order Date]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Customer\Customer to Stage\Union All"
                  componentClassID="Microsoft.UnionAll"
                  contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
                  name="Union All"
                  version="1">
                  <inputs>
                    <input
                      refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2]"
                      hasSideEffects="true"
                      name="Union All Input 2">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2].Columns[Customer ID]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer ID"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer ID]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer ID]}</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2].Columns[Customer Name]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Customer Name"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Customer Name]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer Name]}</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output].Columns[Segment]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]}</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2].Columns[DOrder Date]"
                          cachedDataType="dbDate"
                          cachedName="DOrder Date"
                          lineageId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrder Date]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                    <input
                      refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 1]"
                      hasSideEffects="true"
                      name="Union All Input 1">
                      <externalMetadataColumns />
                    </input>
                    <input
                      refId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 3]"
                      dangling="true"
                      hasSideEffects="true"
                      name="Union All Input 3">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1]"
                      name="Union All Output 1">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer ID]"
                          name="Customer ID" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Customer Name]"
                          name="Customer Name" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]"
                          name="Segment" />
                        <outputColumn
                          refId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]"
                          dataType="dbDate"
                          lineageId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]"
                          name="Order Date" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Aggregate Output 1]"
                  endId="Package\Customer\Customer to Stage\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Customer\Customer to Stage\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Case 1]"
                  endId="Package\Customer\Customer to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Case 1"
                  startId="Package\Customer\Customer to Stage\Conditional Split 1.Outputs[Case 1]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Data Conversion Output]"
                  endId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 2]"
                  name="Data Conversion Output"
                  startId="Package\Customer\Customer to Stage\Data Conversion.Outputs[Data Conversion Output]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Excel Source Output]"
                  endId="Package\Customer\Customer to Stage\Data Conversion.Inputs[Data Conversion Input]"
                  name="Excel Source Output"
                  startId="Package\Customer\Customer to Stage\Excel Source.Outputs[Excel Source Output]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Flat File Source Output]"
                  endId="Package\Customer\Customer to Stage\Union All.Inputs[Union All Input 1]"
                  name="Flat File Source Output"
                  startId="Package\Customer\Customer to Stage\Flat File Source.Outputs[Flat File Source Output]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Load]"
                  endId="Package\Customer\Customer to Stage\Aggregate.Inputs[Aggregate Input 1]"
                  name="Load"
                  startId="Package\Customer\Customer to Stage\Conditional Split.Outputs[Load]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Output 0]"
                  endId="Package\Customer\Customer to Stage\Conditional Split 1.Inputs[Conditional Split Input]"
                  name="Output 0"
                  startId="Package\Customer\Customer to Stage\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Sort Output]"
                  endId="Package\Customer\Customer to Stage\Script Component.Inputs[Input 0]"
                  name="Sort Output"
                  startId="Package\Customer\Customer to Stage\Sort.Outputs[Sort Output]" />
                <path
                  refId="Package\Customer\Customer to Stage.Paths[Union All Output 1]"
                  endId="Package\Customer\Customer to Stage\Conditional Split.Inputs[Conditional Split Input]"
                  name="Union All Output 1"
                  startId="Package\Customer\Customer to Stage\Union All.Outputs[Union All Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Customer\Get LSET"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{3de45d20-3cef-4949-b543-6013ba7d498e}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get LSET"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B5F6E0F8-A3BE-4D4F-AB7C-33244E06D398}"
              SQLTask:SqlStatementSource="SELECT [LSET]&#xA;  FROM [Metadata_SuperStore].[dbo].[Data_Flow]&#xA;  WHERE table_name = 'Customer_Stage'"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="LSET"
                SQLTask:DtsVariableName="User::LSET_read" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Customer\Truncate Customer Stage"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{e002fa2c-52a4-4e18-8077-eb2cdbc95b77}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Truncate Customer Stage"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}"
              SQLTask:SqlStatementSource="truncate table [Stage_SuperStore].[dbo].[Stage_Customer]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Customer\Update LSET Customer"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{4e1e614a-9e73-4fb2-a30b-e5e1ad220a20}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update LSET Customer"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B5F6E0F8-A3BE-4D4F-AB7C-33244E06D398}"
              SQLTask:SqlStatementSource="update Data_Flow &#xA;set LSET = getdate() &#xA;where table_name = 'Customer_Stage'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Customer.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{3AB7FD01-200F-42A8-9E30-6706BE5713EA}"
          DTS:From="Package\Customer\Truncate Customer Stage"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Customer\Get LSET" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Customer.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{AA5200C4-1F4C-4602-9C13-C83C24C48FE5}"
          DTS:From="Package\Customer\Get LSET"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Customer\Customer to Stage" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Customer.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{95C254DB-A0C5-4567-A94F-489C2939DF08}"
          DTS:From="Package\Customer\Customer to Stage"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Customer\Update LSET Customer" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Segment"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{BB5E1BB8-FEF7-476E-9791-BCBF885F9EAF}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Segment">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Segment\Get LSET Segment"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{36c56bd7-a5d2-4c9a-b46e-6d95a008756c}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get LSET Segment"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B5F6E0F8-A3BE-4D4F-AB7C-33244E06D398}"
              SQLTask:SqlStatementSource="SELECT [LSET]&#xA;  FROM [Metadata_SuperStore].[dbo].[Data_Flow]&#xA;  WHERE table_name = 'Segment_Stage'"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="LSET"
                SQLTask:DtsVariableName="LSET_segment::Variable" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Segment\Segment to Stage"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{9794BD67-1089-4212-A1BC-47629DD8C04E}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Segment to Stage"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Segment\Segment to Stage\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Aggregate.Inputs[Aggregate Input 1].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]"
                          name="Segment">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input].Columns[Order Date]"
                          cachedDataType="dbDate"
                          cachedName="Order Date"
                          lineageId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Load]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Load"
                      synchronousInputId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">([YEAR](#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [YEAR](@[LSET_segment::Variable])) &amp;&amp; ([MONTH](#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [MONTH](@[LSET_segment::Variable])) &amp;&amp; ([DAY](#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}) &gt;= [DAY](@[LSET_segment::Variable]))</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">(YEAR([Order Date]) &gt;= YEAR(@[LSET_segment::Variable])) &amp;&amp; (MONTH([Order Date]) &gt;= MONTH(@[LSET_segment::Variable])) &amp;&amp; (DAY([Order Date]) &gt;= DAY(@[LSET_segment::Variable]))</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Data Conversion"
                  componentClassID="Microsoft.DataConvert"
                  contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Data Conversion"
                  name="Data Conversion"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\Data Conversion.Inputs[Data Conversion Input]"
                      name="Data Conversion Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Data Conversion.Inputs[Data Conversion Input].Columns[Order Date]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Order Date"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Order Date]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Output]"
                      exclusionGroup="1"
                      name="Data Conversion Output"
                      synchronousInputId="Package\Segment\Segment to Stage\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrderDate]"
                          dataType="dbDate"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrderDate]"
                          name="DOrderDate"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the input column used as the source of data for the conversion."
                              name="SourceInputColumnLineageID">#{Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Order Date]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Data Conversion Error Output"
                      synchronousInputId="Package\Segment\Segment to Stage\Data Conversion.Inputs[Data Conversion Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Flat File Source"
                  componentClassID="Microsoft.FlatFileSource"
                  contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Source"
                  localeId="1033"
                  name="Flat File Source"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether zero-length columns are treated as null."
                      name="RetainNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                      name="FileNameColumnName"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Segment\Segment to Stage\Flat File Source.Connections[FlatFileConnection]"
                      connectionManagerID="{4D5A124D-F720-4EAD-9B22-D3CA95CA232A}:external"
                      connectionManagerRefId="Project.ConnectionManagers[US_SS_csv]"
                      name="FlatFileConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output]"
                      name="Flat File Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Order Date]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order Date]"
                          length="50"
                          lineageId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Order Date]"
                          name="Order Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Segment]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Segment]"
                          length="50"
                          lineageId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].Columns[Segment]"
                          name="Segment"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Row ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Row ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Order ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Order Date]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Order Date" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Ship Date]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Ship Date" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Ship Mode]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Ship Mode" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Customer ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Customer Name]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Customer Name" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Segment]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Segment" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Country]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[City]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[State]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="State" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Postal Code]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Postal Code" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Region]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Product ID]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Product ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Category]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Category" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Sub-Category]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Sub-Category" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Product Name]"
                          codePage="1252"
                          dataType="str"
                          length="255"
                          name="Product Name" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Sales]"
                          dataType="r8"
                          name="Sales" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Quantity]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          name="Quantity" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Discount]"
                          dataType="r8"
                          name="Discount" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Profit]"
                          dataType="r8"
                          name="Profit" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output]"
                      isErrorOut="true"
                      name="Flat File Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          codePage="1252"
                          dataType="text"
                          description="Flat File Source Error Output Column"
                          lineageId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          name="Flat File Source Error Output Column" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Load Segment Global Store"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Excel Source"
                  name="Load Segment Global Store"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">Sheet1$</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mapping from parameters in the SQL command to variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Segment\Segment to Stage\Load Segment Global Store.Connections[OleDbConnection]"
                      connectionManagerID="{9C64B909-94C3-4468-B2F6-0D37BED0FBAD}:external"
                      connectionManagerRefId="Project.ConnectionManagers[Global_SS_Excel]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output]"
                      name="Excel Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Segment]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Segment]"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Segment]"
                          name="Segment"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Order Date]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Order Date]"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Order Date]"
                          name="Order Date"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Row ID]"
                          dataType="r8"
                          name="Row ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Order ID]"
                          dataType="wstr"
                          length="255"
                          name="Order ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Order Date]"
                          dataType="wstr"
                          length="255"
                          name="Order Date" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Ship Date]"
                          dataType="wstr"
                          length="255"
                          name="Ship Date" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Ship Mode]"
                          dataType="wstr"
                          length="255"
                          name="Ship Mode" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Customer ID]"
                          dataType="wstr"
                          length="255"
                          name="Customer ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Customer Name]"
                          dataType="wstr"
                          length="255"
                          name="Customer Name" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Segment]"
                          dataType="wstr"
                          length="255"
                          name="Segment" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[City]"
                          dataType="wstr"
                          length="255"
                          name="City" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[State]"
                          dataType="wstr"
                          length="255"
                          name="State" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Country]"
                          dataType="wstr"
                          length="255"
                          name="Country" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Postal Code]"
                          dataType="r8"
                          name="Postal Code" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Market]"
                          dataType="wstr"
                          length="255"
                          name="Market" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Region]"
                          dataType="wstr"
                          length="255"
                          name="Region" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Product ID]"
                          dataType="wstr"
                          length="255"
                          name="Product ID" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Category]"
                          dataType="wstr"
                          length="255"
                          name="Category" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Sub-Category]"
                          dataType="wstr"
                          length="255"
                          name="Sub-Category" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Product Name]"
                          dataType="wstr"
                          length="255"
                          name="Product Name" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Sales]"
                          dataType="r8"
                          name="Sales" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Quantity]"
                          dataType="r8"
                          name="Quantity" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Discount]"
                          dataType="r8"
                          name="Discount" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Profit]"
                          dataType="r8"
                          name="Profit" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Shipping Cost]"
                          dataType="r8"
                          name="Shipping Cost" />
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].ExternalColumns[Order Priority]"
                          dataType="wstr"
                          length="255"
                          name="Order Priority" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output]"
                      isErrorOut="true"
                      name="Excel Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[Segment]"
                          name="Segment" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[Order Date]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Error Output].Columns[Order Date]"
                          name="Order Date" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Segment]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Segment\Segment to Stage\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[segment]"
                          lineageId="Package\Segment\Segment to Stage\Sort.Outputs[Sort Output].Columns[Segment]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[segment]"
                          dataType="wstr"
                          length="255"
                          name="segment" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Segment\Segment to Stage\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Sort.Inputs[Sort Input].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Sort.Outputs[Sort Output].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Sort.Outputs[Sort Output].Columns[Segment]"
                          name="Segment"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1].Columns[Segment]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Segment\Segment to Stage\Union All"
                  componentClassID="Microsoft.UnionAll"
                  contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
                  name="Union All"
                  version="1">
                  <inputs>
                    <input
                      refId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 1]"
                      name="Union All Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 1].Columns[Segment]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Segment"
                          lineageId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output].Columns[Segment]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]}</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 1].Columns[DOrderDate]"
                          cachedDataType="dbDate"
                          cachedName="DOrderDate"
                          lineageId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Output].Columns[DOrderDate]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Output column lineage ID"
                              name="OutputColumnLineageID">#{Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]}</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                    <input
                      refId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 2]"
                      hasSideEffects="true"
                      name="Union All Input 2">
                      <externalMetadataColumns />
                    </input>
                    <input
                      refId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 3]"
                      dangling="true"
                      hasSideEffects="true"
                      name="Union All Input 3">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1]"
                      name="Union All Output 1">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Segment]"
                          name="Segment" />
                        <outputColumn
                          refId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]"
                          dataType="dbDate"
                          lineageId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1].Columns[Order Date]"
                          name="Order Date" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Aggregate Output 1]"
                  endId="Package\Segment\Segment to Stage\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Segment\Segment to Stage\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Data Conversion Output]"
                  endId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 1]"
                  name="Data Conversion Output"
                  startId="Package\Segment\Segment to Stage\Data Conversion.Outputs[Data Conversion Output]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Excel Source Output]"
                  endId="Package\Segment\Segment to Stage\Data Conversion.Inputs[Data Conversion Input]"
                  name="Excel Source Output"
                  startId="Package\Segment\Segment to Stage\Load Segment Global Store.Outputs[Excel Source Output]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Flat File Source Output]"
                  endId="Package\Segment\Segment to Stage\Union All.Inputs[Union All Input 2]"
                  name="Flat File Source Output"
                  startId="Package\Segment\Segment to Stage\Flat File Source.Outputs[Flat File Source Output]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Load]"
                  endId="Package\Segment\Segment to Stage\Aggregate.Inputs[Aggregate Input 1]"
                  name="Load"
                  startId="Package\Segment\Segment to Stage\Conditional Split.Outputs[Load]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Sort Output]"
                  endId="Package\Segment\Segment to Stage\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Sort Output"
                  startId="Package\Segment\Segment to Stage\Sort.Outputs[Sort Output]" />
                <path
                  refId="Package\Segment\Segment to Stage.Paths[Union All Output 1]"
                  endId="Package\Segment\Segment to Stage\Conditional Split.Inputs[Conditional Split Input]"
                  name="Union All Output 1"
                  startId="Package\Segment\Segment to Stage\Union All.Outputs[Union All Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Segment\Truncate Segment_Stage"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{190925cc-bd97-4227-833d-f4981d839a9c}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Truncate Segment_Stage"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}"
              SQLTask:SqlStatementSource="truncate table [Stage_SuperStore].[dbo].[Stage_Segment]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Segment\Update LSET Segment"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{b3fb0f7e-a6db-4218-b4dc-729d1c0e4aef}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update LSET Segment"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B5F6E0F8-A3BE-4D4F-AB7C-33244E06D398}"
              SQLTask:SqlStatementSource="update Data_Flow &#xA;set LSET = getdate() &#xA;where table_name = 'Segment_Stage'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Segment.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{49B275F2-6EE1-415C-A404-16924B1186FE}"
          DTS:From="Package\Segment\Truncate Segment_Stage"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Segment\Get LSET Segment" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Segment.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{7D32E9DB-FA5A-41FB-A58A-AA2A44F48BA3}"
          DTS:From="Package\Segment\Get LSET Segment"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Segment\Segment to Stage" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Segment.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{0CC60655-5117-4AC3-85BC-D1862BB760B8}"
          DTS:From="Package\Segment\Segment to Stage"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Segment\Update LSET Segment" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{DEDCEBD4-4018-4DFD-850B-5097296DD78C}"
      DTS:From="Package\Segment"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Customer" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="167,42"
          Id="Package\Customer\Customer to Stage"
          TopLeft="26.5,141.5" />
        <NodeLayout
          Size="122,42"
          Id="Package\Customer\Get LSET"
          TopLeft="46.5,74.5" />
        <NodeLayout
          Size="201,43"
          Id="Package\Customer\Truncate Customer Stage"
          TopLeft="9.5,5.5" />
        <NodeLayout
          Size="188,42"
          Id="Package\Customer\Update LSET Customer"
          TopLeft="13.5,210.5" />
        <EdgeLayout
          Id="Package\Customer.PrecedenceConstraints[Constraint]"
          TopLeft="108.75,48.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,26"
              Start="0,0"
              End="0,18.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer.PrecedenceConstraints[Constraint 1]"
          TopLeft="108.75,116.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer.PrecedenceConstraints[Constraint 5]"
          TopLeft="108.75,183.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27"
              Start="0,0"
              End="0,19.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="216,308"
          Size="216,350"
          Id="Package\Customer"
          TopLeft="350,32" />
        <NodeLayout
          Size="167,42"
          Id="Package\Segment\Get LSET Segment"
          TopLeft="25.9999984353781,72.342104331608" />
        <NodeLayout
          Size="163,42"
          Id="Package\Segment\Segment to Stage"
          TopLeft="26,142.5" />
        <NodeLayout
          Size="201,43"
          Id="Package\Segment\Truncate Segment_Stage"
          TopLeft="8,5.5" />
        <NodeLayout
          Size="184,42"
          Id="Package\Segment\Update LSET Segment"
          TopLeft="18,209.5" />
        <EdgeLayout
          Id="Package\Segment.PrecedenceConstraints[Constraint 2]"
          TopLeft="108.999999217689,48.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23.842104331608"
              Start="0,0"
              End="0,16.342104331608">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.342104331608" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment.PrecedenceConstraints[Constraint 3]"
          TopLeft="108.499999217689,114.342104331608">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28.157895668392"
              Start="0,0"
              End="0,20.657895668392">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.657895668392" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment.PrecedenceConstraints[Constraint 4]"
          TopLeft="108.75,184.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="214,307"
          Size="214,350"
          Id="Package\Segment"
          TopLeft="47,32" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="261,207">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="89,0"
              Start="0,0"
              End="81.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="81.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Customer\Customer to Stage">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="123,43"
          Id="Package\Customer\Customer to Stage\Union All"
          TopLeft="275.708323079472,198.105262399133" />
        <NodeLayout
          Size="165,54"
          Id="Package\Customer\Customer to Stage\Conditional Split 1"
          TopLeft="254,572.28654461523" />
        <NodeLayout
          Size="129,43"
          Id="Package\Customer\Customer to Stage\Aggregate"
          TopLeft="271.416656207294,351.491226252069" />
        <NodeLayout
          Size="165,43"
          Id="Package\Customer\Customer to Stage\Script Component"
          TopLeft="252.333333293597,499.251458334149" />
        <NodeLayout
          Size="159,43"
          Id="Package\Customer\Customer to Stage\Data Conversion"
          TopLeft="55,127.578946406822" />
        <NodeLayout
          Size="157,43"
          Id="Package\Customer\Customer to Stage\Conditional Split"
          TopLeft="261.458324029421,277.228069078614" />
        <NodeLayout
          Size="171,42"
          Id="Package\Customer\Customer to Stage\OLE DB Destination"
          TopLeft="251,680" />
        <NodeLayout
          Size="143,42"
          Id="Package\Customer\Customer to Stage\Excel Source"
          TopLeft="63.0833327186604,48.9473683008527" />
        <NodeLayout
          Size="99,43"
          Id="Package\Customer\Customer to Stage\Sort"
          TopLeft="284.708328433956,429" />
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Union All Output 1]"
          TopLeft="338.583323554446,241.105262399133">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36.1228066794814"
              Start="0,0"
              End="0,28.6228066794814">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.6228066794814" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Sort Output]"
          TopLeft="334.520830863776,472">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27.251458334149"
              Start="0,0"
              End="0,19.751458334149">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.751458334149" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Output 0]"
          TopLeft="335.666666646798,542.251458334149">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.035086281081"
              Start="0,0"
              End="0,22.535086281081">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.535086281081" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Load]"
          TopLeft="337.937490118357,320.228069078614">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31.263157173455"
              Start="0,0"
              End="0,23.763157173455">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.763157173455" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-10.89298828125,7.0070668679775,21.7859765625,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Excel Source Output]"
          TopLeft="134.54166635933,90.9473683008527">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36.6315781059693"
              Start="0,0"
              End="0,29.1315781059693">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.1315781059693" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Data Conversion Output]"
          TopLeft="134.5,170.578946406822">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="183.541656412805,27.526315992311"
              Start="0,0"
              End="183.541656412805,20.026315992311">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,12.3037088301168" />
                  <mssgle:CubicBezierSegment
                    Point1="0,12.3037088301168"
                    Point2="0,16.3037088301168"
                    Point3="4,16.3037088301168" />
                  <mssgle:LineSegment
                    End="179.541656412805,16.3037088301168" />
                  <mssgle:CubicBezierSegment
                    Point1="179.541656412805,16.3037088301168"
                    Point2="183.541656412805,16.3037088301168"
                    Point3="183.541656412805,20.3037088301168" />
                  <mssgle:LineSegment
                    End="183.541656412805,20.026315992311" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Case 1]"
          TopLeft="336.5,626.28654461523">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,53.71345538477"
              Start="0,0"
              End="0,46.21345538477">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.21345538477" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-15.2180859375,18.329872223635,30.436171875,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Aggregate Output 1]"
          TopLeft="335.062492320625,394.491226252069">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34.508773747931"
              Start="0,0"
              End="0,27.008773747931">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.008773747931" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="151,42"
          Id="Package\Customer\Customer to Stage\Flat File Source"
          TopLeft="374.5,43.7936288088643" />
        <EdgeLayout
          Id="Package\Customer\Customer to Stage.Paths[Flat File Source Output]"
          TopLeft="450,85.7936288088643">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-93.6250102538613,112.311633590269"
              Start="0,0"
              End="-93.6250102538613,104.811633590269">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,62.5216577765797" />
                  <mssgle:CubicBezierSegment
                    Point1="0,62.5216577765797"
                    Point2="0,66.5216577765797"
                    Point3="-4,66.5216577765797" />
                  <mssgle:LineSegment
                    End="-89.6250102538613,66.5216577765797" />
                  <mssgle:CubicBezierSegment
                    Point1="-89.6250102538613,66.5216577765797"
                    Point2="-93.6250102538613,66.5216577765797"
                    Point3="-93.6250102538613,70.5216577765797" />
                  <mssgle:LineSegment
                    End="-93.6250102538613,104.811633590269" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Customer\Customer to Stage\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Customer\Customer to Stage\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Segment\Segment to Stage">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="175,43"
          Id="Package\Segment\Segment to Stage\OLE DB Destination"
          TopLeft="270.660704957854,522.95237785294" />
        <NodeLayout
          Size="123,43"
          Id="Package\Segment\Segment to Stage\Union All"
          TopLeft="291.785704147603,220.215538347" />
        <NodeLayout
          Size="207,42"
          Id="Package\Segment\Segment to Stage\Load Segment Global Store"
          TopLeft="60,60" />
        <NodeLayout
          Size="159,43"
          Id="Package\Segment\Segment to Stage\Data Conversion"
          TopLeft="78.6607134515153,134.426064287165" />
        <NodeLayout
          Size="129,43"
          Id="Package\Segment\Segment to Stage\Aggregate"
          TopLeft="292.160704175543,378.18044935809" />
        <NodeLayout
          Size="157,43"
          Id="Package\Segment\Segment to Stage\Conditional Split"
          TopLeft="279.660704734336,289.706765921351" />
        <NodeLayout
          Size="98,42"
          Id="Package\Segment\Segment to Stage\Sort"
          TopLeft="306,452" />
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Union All Output 1]"
          TopLeft="355.723204440969,263.215538347">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,26.491227574351"
              Start="0,0"
              End="0,18.991227574351">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18.991227574351" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Sort Output]"
          TopLeft="356.580352478927,494">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28.95237785294"
              Start="0,0"
              End="0,21.45237785294">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.45237785294" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Load]"
          TopLeft="357.577371121606,332.373432588017">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,45.8070167700727"
              Start="0,0"
              End="0,38.3070167700727">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.3070167700727" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-10.89298828125,14.2789966662863,21.7859765625,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Excel Source Output]"
          TopLeft="160.830356725758,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,32.426064287165"
              Start="0,0"
              End="0,24.926064287165">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.926064287165" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Data Conversion Output]"
          TopLeft="158.160713451515,177.426064287165">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="175.958324029421,42.789474059835"
              Start="0,0"
              End="175.958324029421,35.289474059835">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.3440063051029" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.3440063051029"
                    Point2="0,25.3440063051029"
                    Point3="4,25.3440063051029" />
                  <mssgle:LineSegment
                    End="171.958324029421,25.3440063051029" />
                  <mssgle:CubicBezierSegment
                    Point1="171.958324029421,25.3440063051029"
                    Point2="175.958324029421,25.3440063051029"
                    Point3="175.958324029421,29.3440063051029" />
                  <mssgle:LineSegment
                    End="175.958324029421,35.289474059835" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Aggregate Output 1]"
          TopLeft="355.830352087772,421.18044935809">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.81955064191"
              Start="0,0"
              End="0,23.31955064191">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.31955064191" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="151,42"
          Id="Package\Segment\Segment to Stage\Flat File Source"
          TopLeft="398.5,55.3551236749117" />
        <EdgeLayout
          Id="Package\Segment\Segment to Stage.Paths[Flat File Source Output]"
          TopLeft="474,97.3551236749117">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-101.54762918573,122.860414672088"
              Start="0,0"
              End="-101.54762918573,115.360414672088">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,68.7696517078661" />
                  <mssgle:CubicBezierSegment
                    Point1="0,68.7696517078661"
                    Point2="0,72.7696517078661"
                    Point3="-4,72.7696517078661" />
                  <mssgle:LineSegment
                    End="-97.5476291857303,72.7696517078661" />
                  <mssgle:CubicBezierSegment
                    Point1="-97.5476291857303,72.7696517078661"
                    Point2="-101.54762918573,72.7696517078661"
                    Point3="-101.54762918573,76.7696517078661" />
                  <mssgle:LineSegment
                    End="-101.54762918573,115.360414672088" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Segment\Segment to Stage\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Segment\Segment to Stage\Load Segment Global Store">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>