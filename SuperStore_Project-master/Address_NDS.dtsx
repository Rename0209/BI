<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/15/2023 12:20:39 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CLOUD"
  DTS:CreatorName="CLOUD\ndvannhi"
  DTS:DTSID="{412F96AA-F07F-451F-BFF6-50E87513DD50}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1066"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="99"
  DTS:VersionGUID="{2818C1FD-CE7C-42AA-92E0-FE1EDEAB9D00}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{921C70FE-D410-471A-AD97-ED097F689580}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="city_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{49AB1B91-922E-49F4-A6ED-8791713D6DBB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="country_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C21C40E1-E8A5-4D1C-BB16-61116354B03D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="market_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{94486D98-E4AD-4E8F-BA88-562908134E7C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="postal_code_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{070CDB77-931D-4434-9D9F-981221E8E558}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="region_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{26710282-A3DD-440A-BAAD-AEEB5506BF33}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="state_max_id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\City"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{DB5E8467-3A79-4A12-992B-9E6FC18195C5}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="City">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\City\City"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{01D02946-65E7-4805-A896-3F268BE832D7}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="City"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\City\City\Add create &amp; update dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add create &amp; update dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\City\City\Add create &amp; update dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\City\City\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\City\City\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\City\City\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Aggregate.Inputs[Aggregate Input 1].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]" />
                        <inputColumn
                          refId="Package\City\City\Aggregate.Inputs[Aggregate Input 1].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]" />
                        <inputColumn
                          refId="Package\City\City\Aggregate.Inputs[Aggregate Input 1].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          name="state">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[city]"
                          name="city">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Check if exist country"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist country"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Country]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Country]) [refTable]
where [refTable].[country] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\City\City\Check if exist country.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\City\City\Check if exist country.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Check if exist country.Inputs[Lookup Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Check if exist country.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\City\City\Check if exist country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          name="country_id_lookedup"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Check if exist country.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\City\City\Check if exist country.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Check if exist country.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\City\City\Check if exist country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Check if exist state"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist state"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_State]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_State]) [refTable]
where [refTable].[state] = ? and [refTable].[country_id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]};#{Package\City\City\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\City\City\Check if exist state.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\City\City\Check if exist state.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Check if exist state.Inputs[Lookup Input].Columns[state_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state_trimmed"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">state</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\City\City\Check if exist state.Inputs[Lookup Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          lineageId="Package\City\City\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Check if exist state.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\City\City\Check if exist state.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[state_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[state_id]"
                          name="state_id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[country_id_from_state]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[country_id_from_state]"
                          name="country_id_from_state"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">country_id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Check if exist state.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\City\City\Check if exist state.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Check if exist state.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\City\City\Check if exist state.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Check if exist state.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Check if exist state.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\City\City\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Conditional Split.Inputs[Conditional Split Input].Columns[city_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city_trimmed"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Conditional Split.Outputs[CityNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="CityNULL"
                      synchronousInputId="Package\City\City\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(city_trimmed)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Conditional Split.Outputs[CityNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="CityNotNULL"
                      synchronousInputId="Package\City\City\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\City\City\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\City\City\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Derived Column.Inputs[Derived Column Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[country]" />
                        <inputColumn
                          refId="Package\City\City\Derived Column.Inputs[Derived Column Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[state]" />
                        <inputColumn
                          refId="Package\City\City\Derived Column.Inputs[Derived Column Input].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          cachedSortKeyPosition="1"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[city]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\City\City\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          name="country_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\City\City\Sort.Outputs[Sort Output].Columns[country]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(country)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          name="state_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\City\City\Sort.Outputs[Sort Output].Columns[state]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(state)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]"
                          name="city_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\City\City\Sort.Outputs[Sort Output].Columns[city]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(city)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\City\City\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_City]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_City]) [refTable]
where [refTable].[city] = ? and [refTable].[state_id] = ? and [refTable].[country_id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="city" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]};#{Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[state_id]};#{Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[country_id_from_state]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\City\City\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\City\City\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Lookup.Inputs[Lookup Input].Columns[city_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city_trimmed"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">city</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\City\City\Lookup.Inputs[Lookup Input].Columns[state_id]"
                          cachedDataType="i4"
                          cachedName="state_id"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[state_id]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">state_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\City\City\Lookup.Inputs[Lookup Input].Columns[country_id_from_state]"
                          cachedDataType="i4"
                          cachedName="country_id_from_state"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[country_id_from_state]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\City\City\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          name="id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          name="created_date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">created_date</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[country_id_output]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[country_id_output]"
                          name="country_id_output"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">country_id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[state_id_output]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Match Output].Columns[state_id_output]"
                          name="state_id_output"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">state_id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\City\City\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\City\City\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\City\City\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_City]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\City\City\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]" />
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[cityid]"
                          cachedDataType="i4"
                          cachedName="cityid"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\City\City\Script Component.Outputs[Output 0].Columns[cityid]" />
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[country_id_from_state]"
                          cachedDataType="i4"
                          cachedName="country_id_from_state"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[country_id_from_state]" />
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[city_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city_trimmed"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[city]"
                          lineageId="Package\City\City\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]" />
                        <inputColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[state_id]"
                          cachedDataType="i4"
                          cachedName="state_id"
                          externalMetadataColumnId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          lineageId="Package\City\City\Check if exist state.Outputs[Lookup Match Output].Columns[state_id]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          dataType="i4"
                          name="country_id" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          dataType="i4"
                          name="state_id" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\City\City\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          name="country"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          name="state"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]"
                          name="city"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          name="country" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          name="state" />
                        <outputColumn
                          refId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[city]"
                          name="city" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 citymaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["city_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.cityid = this.Variables.citymaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 cityid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool cityid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Settings.get_Default():SC_10aca06cb4f84644bed483d49146f2d3.Properties.Sett" +
    "ings")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{02AF9EC2-51A2-49DE-AB40-F6010BC98DB0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_10aca06cb4f84644bed483d49146f2d3</RootNamespace>
    <AssemblyName>SC_82E1E8FC07B34134807C38AE8A7CBC84</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_10aca06cb4f84644bed483d49146f2d3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_10aca06cb4f84644bed483d49146f2d3</msb:DisplayName>
    <msb:ProjectId>{202F49CB-68A2-4776-A06A-F37CE4984AF9}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_10aca06cb4f84644bed483d49146f2d3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_82E1E8FC07B34134807C38AE8A7CBC84.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAC68e2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA1jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIQyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA3BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAC4
MgAAAAAAAEgAAAACAAUA0CEAAPwPAAABAAAAAAAAAMwxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLGAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAAAgH
AAAjU3RyaW5ncwAAAAD8DAAAOAEAACNVUwA0DgAAEAAAACNHVUlEAAAARA4AALgBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABCAwEAAAAAAAYAPALnBAYA0ALnBAYAiAHUBA8AWwUA
AAYAtQHeAwYAHwLeAwYAAALeAwYAtwLeAwYAXALeAwYAdQLeAwYAzAHeAwYA5wELAwoAkALVAAoA
fgTVAA4AbwTVAAoAJwTVAAoALQbVAAYA8AWWAwYAawHUBAYAjwQHBQYAGwTJAxIAOwEsAxIAnAEs
AxIAIwG0AwYAUAHnBAYAOgCWAwYA8AOWAwYAJQOWAwYACgSWAxYAEQCfBBYAAQCfBEcAqQYAABYA
IgCfBAYA9gCWAwYApwCWAwYA/AbeAwAAAABkAAAAAAABAAEAAQAQAKkDAAAQAAEAAQABABAAYgQA
ADkAAgAFAAEAEAAPBgAARQACAAoAAQAQAOQFAABJAAQADgABABAApQUAAEkABQAPAAAAEAAOBWoF
SQAGABEAAAEQANQFagVhAAgAFQABAD0GfQAGAOQFgAAGAKUFhAABAB0GiAABAB0GiAARAJ0DjAAR
ABMBkAARAJcAlABQIAAAAADGAO4CBgABAFggAAAAAMYA+QIGAAEAYCAAAAAAxgDZBpgAAQCIIAAA
AACGGMcEBgACAJAgAAAAAIYYxwQbAAIAmyAAAAAAhgiMAAEABQCqIAAAAACGCGoDngAGAMEgAAAA
AIYA8AYrAAcAySAAAAAAhgD3BSsABwDRIAAAAACGGMcEBgAHAPEgAAAAAMYAiAajAAcAFiEAAAAA
xgGBBpgACwApIQAAAADGAdkGmAAMACshAAAAAIYYxwStAA0AOiEAAAAAhhjHBK0ADgBJIQAAAACG
CH4AswAPAG8hAAAAAIMYxwQGAA8AdyEAAAAAkwiLBLcADwCjIQAAAACTCPsAvAAPAKohAAAAAJMI
BwHBAA8AsiEAAAAAlggDBscAEAC5IQAAAACGGMcEBgAQAMEhAAAAAJEYzQTMABAAAAABAPQGAAAB
AIQEAAACAK8FAAADADUEAAABAAUDAAABAAUDAAABAG0AAAACAMsAAAADAIQEAAAEADUEAAABAIQE
AAABAPQGAAABADMGAAABADMGAAABAAUDCQDHBAEAEQDHBAYAGQDHBAoAKQDHBBAAMQDHBBAAOQDH
BBAAQQDHBBAASQDHBBAAUQDHBBAAWQDHBBAAYQDHBBAAaQDHBAYAmQDHBAYAuQDHBBUAyQDHBAYA
iQDuAgYAiQD5AgYAcQDHBBsAcQCNAyUAcQB8AwEA2QDHBBAAcQDwBisAcQD3BSsAiQDHBAYA4QDd
BS8AiQDDBTYAkQDHBAYAiQCZBTwA8QCEA0EAiQDEBkcA+QCVBk0AEQG5AFQAEQH4Bl0AoQDHBGMA
wQDHBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALIBiQBzAA8BqQBzAA8B4wBrALIBAQF7ALIBAwABAAYAAwAHAAQA
CAAGAAAAkADQAAAAbgPUAAAAggDQAAAAjwTYAAAAGwHdAAAABwbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQAQwYAAAAAEAAAAAAAAAAAAAAAdABgBgAAAAAEAAAAAAAA
AAAAAABrAJYDAAAAABAAAAAAAAAAAAAAAHQAPwQAAAAAAAAAAAEAAAAYBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgBT
Q184MkUxRThGQzA3QjM0MTM0ODA3QzM4QUU4QTdDQkM4NAA8TW9kdWxlPgBJbnB1dElEAG1zY29y
bGliAGdldF9jaXR5bWF4aWQAc2V0X2NpdHlpZABkZWZhdWx0SW5zdGFuY2UAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJp
YnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlD
b25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1i
bHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRBdHRyaWJ1
dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRl
AFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBT
dHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzgyRTFFOEZDMDdCMzQxMzQ4MDdDMzhBRThB
N0NCQzg0LmRsbABzZXRfY2l0eWlkX0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNldF9JdGVtAFN5
c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5H
bG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24A
U3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNy
b3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZl
cgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0
cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTBhY2EwNmNiNGY4
NDY0NGJlZDQ4M2Q0OTE0NmYyZDMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVn
Z2luZ01vZGVzAFNDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkxNDZmMmQzLlByb3BlcnRpZXMA
Z2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhl
cwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0AGdldF9EZWZh
dWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABjb3VudABN
aWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVI
b3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21wb25l
bnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vzc0lucHV0Um93
AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AAAAAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5
ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMA
aQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBz
AHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAABdjAGkAdAB5AF8AbQBhAHgAXwBpAGQAAHFTAEMA
XwAxADAAYQBjAGEAMAA2AGMAYgA0AGYAOAA0ADYANAA0AGIAZQBkADQAOAAzAGQANAA5ADEANAA2
AGYAMgBkADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAABID2oyO
E5dDpAd0G8zR6uQABCABAQgDIAABBSABARERBCABAQ4FIAEBEVkJIAMBEj0dCBJBBSACAQgcAyAA
AgYgAgIOEXUFIAEdCAgEIAASeQUgARJ9HAUAABKAgQYgARwSgIUIAAESgIkRgI0FIAASgJEHIAIB
DhKAkQi3elxWGTTgiQiJhF3NgIDMkQIGCAMGEhQDBhIYAwYSRQMGElEDBhJVAwYSIAUgAQESDAQg
AQECCSAEAQgOEj0SQQUgAQESRQMgAAgEAAASUQQAABJVBQABARJVBAAAEiADAAABAygACAMoAAIE
CAASUQQIABJVBAgAEiAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkxNDZmMmQzAAAFAQAAAAAHAQAC
SFAAABgBABNDb3B5cmlnaHQgQCBIUCAyMDIzAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNwQBAAAAALQAAADO
yu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZl
cnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5
MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFE
UEFEULQAAACsMgAAAAAAAAAAAADGMgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuDIAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBk
ADQAOQAxADQANgBmADIAZAAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwA4ADIARQAx
AEUAOABGAEMAMAA3AEIAMwA0ADEAMwA0ADgAMAA3AEMAMwA4AEEARQA4AEEANwBDAEIAQwA4ADQA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwA4ADIARQAxAEUAOABGAEMAMAA3AEIAMwA0ADEAMwA0ADgAMAA3AEMAMwA4AEEARQA4AEEA
NwBDAEIAQwA4ADQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBkADQAOQAxADQA
NgBmADIAZAAzAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA2DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_82e1e8fc07b34134807c38ae8a7cbc84</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::city_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">DB</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\City\City\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\City\City\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Script Component.Outputs[Output 0].Columns[cityid]"
                          dataType="i4"
                          lineageId="Package\City\City\Script Component.Outputs[Output 0].Columns[cityid]"
                          name="cityid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\City\City\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\City\City\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\City\City\Sort.Inputs[Sort Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[country]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\City\City\Sort.Inputs[Sort Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[state]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\City\City\Sort.Inputs[Sort Input].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          lineageId="Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[city]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\City\City\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\City\City\Sort.Outputs[Sort Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[country]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Sort.Outputs[Sort Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[state]"
                          name="state">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[state]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\City\City\Sort.Outputs[Sort Output].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\City\City\Sort.Outputs[Sort Output].Columns[city]"
                          name="city"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\City\City\Aggregate.Outputs[Aggregate Output 1].Columns[city]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\City\City.Paths[Aggregate Output 1]"
                  endId="Package\City\City\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\City\City\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\City\City.Paths[Derived Column Output]"
                  endId="Package\City\City\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\City\City\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\City\City.Paths[Derived Column Output1]"
                  endId="Package\City\City\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\City\City\Add create &amp; update dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\City\City.Paths[Lookup Match Output]"
                  endId="Package\City\City\Check if exist state.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\City\City\Check if exist country.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\City\City.Paths[Lookup Match Output1]"
                  endId="Package\City\City\Lookup.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\City\City\Check if exist state.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\City\City.Paths[Lookup No Match Output]"
                  endId="Package\City\City\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\City\City\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\City\City.Paths[OLE DB Source Output]"
                  endId="Package\City\City\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\City\City\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\City\City.Paths[Output 0]"
                  endId="Package\City\City\Add create &amp; update dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\City\City\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\City\City.Paths[Sort Output]"
                  endId="Package\City\City\Derived Column.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\City\City\Sort.Outputs[Sort Output]" />
                <path
                  refId="Package\City\City.Paths[StateNotNULL]"
                  endId="Package\City\City\Check if exist country.Inputs[Lookup Input]"
                  name="StateNotNULL"
                  startId="Package\City\City\Conditional Split.Outputs[CityNotNULL]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\City\Find max id of City"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{B9CC341B-28B3-4942-B073-E7727E480792}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of City"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_City "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::city_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\City.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{BD367674-B02A-4604-AF37-9B26A40F657D}"
          DTS:From="Package\City\Find max id of City"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\City\City" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Market &amp; Region &amp; Country"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{A25BEBF9-E97F-419E-B8C2-9233EE451EB5}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Market &amp; Region &amp; Country">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Country"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{A7020D4B-FCCF-42AA-BE4B-01F2AEF14444}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Country"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add create &amp; update dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Inputs[Aggregate Input 1].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[CountryNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="CountryNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(country_trimmed)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[CountryNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="CountryNotNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Inputs[Derived Column Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output].Columns[country]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          name="country_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output].Columns[country]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(country)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Country]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Country]) [refTable]
where [refTable].[country] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          name="id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          name="created_date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">created_date</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_Country]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[countryid]"
                          cachedDataType="i4"
                          cachedName="countryid"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Script Component.Outputs[Output 0].Columns[countryid]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country]"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          name="country"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          name="country" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 countrymaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["country_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.countryid = this.Variables.countrymaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 countryid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool countryid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Settings.get_Default():SC_10aca06cb4f84644bed483d49146f2d3.Properties.Sett" +
    "ings")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{02AF9EC2-51A2-49DE-AB40-F6010BC98DB0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_10aca06cb4f84644bed483d49146f2d3</RootNamespace>
    <AssemblyName>SC_25CD8525A1F74E7F86ADE2CA5F1FECDB</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_10aca06cb4f84644bed483d49146f2d3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_10aca06cb4f84644bed483d49146f2d3</msb:DisplayName>
    <msb:ProjectId>{B2ED45CC-56C2-4011-B8B5-55C1838523FA}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_10aca06cb4f84644bed483d49146f2d3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_25CD8525A1F74E7F86ADE2CA5F1FECDB.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGize2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA5jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAJQyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA7BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADI
MgAAAAAAAEgAAAACAAUA0CEAAAwQAAABAAAAAAAAANwxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLMAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAABAH
AAAjU3RyaW5ncwAAAAAEDQAAQAEAACNVUwBEDgAAEAAAACNHVUlEAAAAVA4AALgBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABIAwEAAAAAAAYAQgLwBAYA1gLwBAYAjgHdBA8AZAUA
AAYAuwHnAwYAJQLnAwYABgLnAwYAvQLnAwYAYgLnAwYAewLnAwYA0gHnAwYA7QERAwoAlgLbAAoA
hwTbAA4AeATbAAoAMATbAAoANgbbAAYA+QWfAwYAcQHdBAYAmAQQBQYAJATSAxIAQQEyAxIAogEy
AxIAKQG9AwYAVgHwBAYAOgCfAwYA+QOfAwYAKwOfAwYAEwSfAxYAEQCoBBYAAQCoBEcAsgYAABYA
IgCoBAYA/ACfAwYArQCfAwYABQfnAwAAAABAAAAAAAABAAEAAQAQALIDAAAQAAEAAQABABAAawQA
ADkAAgAFAAEAEAAYBgAARQACAAoAAQAQAO0FAABJAAQADgABABAArgUAAEkABQAPAAAAEAAXBXMF
SQAGABEAAAEQAN0FcwVhAAgAFQABAEYGfQAGAO0FgAAGAK4FhAABACYGiAABACYGiAARAKYDjAAR
ABkBkAARAJ0AlABQIAAAAADGAPQCBgABAFggAAAAAMYA/wIGAAEAYCAAAAAAxgDiBpgAAQCIIAAA
AACGGNAEBgACAJAgAAAAAIYY0AQbAAIAmyAAAAAAhgiPAAEABQCqIAAAAACGCHADngAGAMEgAAAA
AIYA+QYrAAcAySAAAAAAhgAABisABwDRIAAAAACGGNAEBgAHAPEgAAAAAMYAkQajAAcAFiEAAAAA
xgGKBpgACwApIQAAAADGAeIGmAAMACshAAAAAIYY0AStAA0AOiEAAAAAhhjQBK0ADgBJIQAAAACG
CH4AswAPAG8hAAAAAIMY0AQGAA8AdyEAAAAAkwiUBLcADwCjIQAAAACTCAEBvAAPAKohAAAAAJMI
DQHBAA8AsiEAAAAAlggMBscAEAC5IQAAAACGGNAEBgAQAMEhAAAAAJEY1gTMABAAAAABAP0GAAAB
AI0EAAACALgFAAADAD4EAAABAAsDAAABAAsDAAABAG0AAAACANEAAAADAI0EAAAEAD4EAAABAI0E
AAABAP0GAAABADwGAAABADwGAAABAAsDCQDQBAEAEQDQBAYAGQDQBAoAKQDQBBAAMQDQBBAAOQDQ
BBAAQQDQBBAASQDQBBAAUQDQBBAAWQDQBBAAYQDQBBAAaQDQBAYAmQDQBAYAuQDQBBUAyQDQBAYA
iQD0AgYAiQD/AgYAcQDQBBsAcQCWAyUAcQCFAwEA2QDQBBAAcQD5BisAcQAABisAiQDQBAYA4QDm
BS8AiQDMBTYAkQDQBAYAiQCiBTwA8QCNA0EAiQDNBkcA+QCeBk0AEQG/AFQAEQEBB10AoQDQBGMA
wQDQBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALIBiQBzAA8BqQBzAA8B4wBrALIBAQF7ALIBAwABAAYAAwAHAAQA
CAAGAAAAkwDQAAAAdAPUAAAAggDQAAAAmATYAAAAIQHdAAAAEAbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAEkAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQATAYAAAAAEAAAAAAAAAAAAAAAdABpBgAAAAAEAAAAAAAA
AAAAAABrAJ8DAAAAABAAAAAAAAAAAAAAAHQASAQAAAAAAAAAAAEAAAAhBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgA8
TW9kdWxlPgBTQ18yNUNEODUyNUExRjc0RTdGODZBREUyQ0E1RjFGRUNEQgBJbnB1dElEAG1zY29y
bGliAGdldF9jb3VudHJ5bWF4aWQAc2V0X2NvdW50cnlpZABkZWZhdWx0SW5zdGFuY2UAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVy
R2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJs
ZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0
ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNz
ZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUA
QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzI1Q0Q4NTI1QTFGNzRFN0Y4NkFE
RTJDQTVGMUZFQ0RCLmRsbABzZXRfY291bnRyeWlkX0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNl
dF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9u
AFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25F
eGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1
dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1ZmZlcgBQaXBl
bGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGlj
cwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTBh
Y2EwNmNiNGY4NDY0NGJlZDQ4M2Q0OTE0NmYyZDMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3Vy
Y2VzAERlYnVnZ2luZ01vZGVzAFNDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkxNDZmMmQzLlBy
b3BlcnRpZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29s
dW1uSW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0
AGdldF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVu
dABjb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
UGlwZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3Jp
cHRDb21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vz
c0lucHV0Um93AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AAAAAICbSQBzAE4AdQBsAGwAIABwAHIAbwBw
AGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4A
IABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBu
ACAAaQBuAHMAdABlAGEAZAAuAAAPSQBuAHAAdQB0ACAAMAAAHWMAbwB1AG4AdAByAHkAXwBtAGEA
eABfAGkAZAAAcVMAQwBfADEAMABhAGMAYQAwADYAYwBiADQAZgA4ADQANgA0ADQAYgBlAGQANAA4
ADMAZAA0ADkAMQA0ADYAZgAyAGQAMwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUA
cgBjAGUAcwAAAAC2eim0a+4SSaohMWWebnwLAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFZCSAD
ARI9HQgSQQUgAgEIHAMgAAIGIAICDhF1BSABHQgIBCAAEnkFIAESfRwFAAASgIEGIAEcEoCFCAAB
EoCJEYCNBSAAEoCRByACAQ4SgJEIt3pcVhk04IkIiYRdzYCAzJECBggDBhIUAwYSGAMGEkUDBhJR
AwYSVQMGEiAFIAEBEgwEIAEBAgkgBAEIDhI9EkEFIAEBEkUDIAAIBAAAElEEAAASVQUAAQESVQQA
ABIgAwAAAQMoAAgDKAACBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhj
ZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ18xMGFjYTA2Y2I0Zjg0NjQ0YmVkNDgzZDQ5MTQ2
ZjJkMwAABQEAAAAABwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyMwAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcEAQAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFk
ZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNl
dAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAvDIAAAAAAAAAAAAA1jIAAAAgAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAMgyAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBk
ADQAOQAxADQANgBmADIAZAAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAyADUAQwBE
ADgANQAyADUAQQAxAEYANwA0AEUANwBGADgANgBBAEQARQAyAEMAQQA1AEYAMQBGAEUAQwBEAEIA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwAyADUAQwBEADgANQAyADUAQQAxAEYANwA0AEUANwBGADgANgBBAEQARQAyAEMAQQA1AEYA
MQBGAEUAQwBEAEIALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBkADQAOQAxADQA
NgBmADIAZAAzAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA6DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_25cd8525a1f74e7f86ade2ca5f1fecdb</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::country_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">91</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Country\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Script Component.Outputs[Output 0].Columns[countryid]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Script Component.Outputs[Output 0].Columns[countryid]"
                          name="countryid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Country\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Country\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Sort.Inputs[Sort Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1].Columns[country]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output].Columns[country]"
                          name="country"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1].Columns[country]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Aggregate Output 1]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Derived Column Output]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Derived Column Output1]"
                  endId="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Lookup No Match Output]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\Market &amp; Region &amp; Country\Country\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[OLE DB Source Output]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\Market &amp; Region &amp; Country\Country\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Output 0]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\Market &amp; Region &amp; Country\Country\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[RegionNotNULL]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Lookup.Inputs[Lookup Input]"
                  name="RegionNotNULL"
                  startId="Package\Market &amp; Region &amp; Country\Country\Conditional Split.Outputs[CountryNotNULL]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Country.Paths[Sort Output]"
                  endId="Package\Market &amp; Region &amp; Country\Country\Derived Column.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\Market &amp; Region &amp; Country\Country\Sort.Outputs[Sort Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Find max id of Country"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{E0F0EBB3-682C-4965-B280-0175B714B52C}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of Country"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_Country"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::country_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Find max id of Market"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{A394F4EB-0126-469D-ACF7-711AFD80934E}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of Market"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_Market "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::market_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Find max id of Region"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{9A932906-A1EB-48EC-AC85-95F04F58C6FB}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of Region"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_Region "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::region_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Market"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{1D36C8BD-8D20-4F0C-88DA-8CEE0F9B38F2}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Market"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add created &amp; updated dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Inputs[Aggregate Input 1].Columns[market]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].Columns[market]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1].Columns[market]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1].Columns[market]"
                          name="market">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].Columns[market]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input].Columns[market]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[MarketNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="MarketNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(market)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[MarketNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="MarketNotNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Market]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Market]) [refTable]
where [refTable].[market] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="market" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output].Columns[market_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input].Columns[market_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market_trimmed"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output].Columns[market_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">market</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          name="id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          name="created_date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">created_date</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_Market]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[market]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[market]"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[marketid]"
                          cachedDataType="i4"
                          cachedName="marketid"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Script Component.Outputs[Output 0].Columns[marketid]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output].Columns[created_Date]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select market from Stage_Address</property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].Columns[market]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].Columns[market]"
                          name="market"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[market]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[market]"
                          name="market" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 marketmaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["market_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.marketid = this.Variables.marketmaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 marketid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool marketid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Settings.get_Default():SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Sett" +
    "ings")]

namespace SC_2d52156140de48a39ec2c10ca2e3284a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_2d52156140de48a39ec2c10ca2e3284a.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A0974D9A-39A7-49AD-8C67-950027204B21}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_2d52156140de48a39ec2c10ca2e3284a</RootNamespace>
    <AssemblyName>SC_2d52156140de48a39ec2c10ca2e3284a</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_2d52156140de48a39ec2c10ca2e3284a</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_2d52156140de48a39ec2c10ca2e3284a</msb:DisplayName>
    <msb:ProjectId>{FBB85923-ECDC-4937-BED1-4DE8EB3BC4D0}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_2d52156140de48a39ec2c10ca2e3284a.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_2d52156140de48a39ec2c10ca2e3284a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_2d52156140de48a39ec2c10ca2e3284a")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_2d52156140de48a39ec2c10ca2e3284a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_2d52156140de48a39ec2c10ca2e3284a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_2d52156140de48a39ec2c10ca2e3284a.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEWue2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA3jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIwyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
MgAAAAAAAEgAAAACAAUA0CEAAAQQAAABAAAAAAAAANQxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLKAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAAAwH
AAAjU3RyaW5ncwAAAAAADQAAPAEAACNVUwA8DgAAEAAAACNHVUlEAAAATA4AALgBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABGAwEAAAAAAAYAQALtBAYA1ALtBAYAjAHaBA8AYQUA
AAYAuQHkAwYAIwLkAwYABALkAwYAuwLkAwYAYALkAwYAeQLkAwYA0AHkAwYA6wEPAwoAlALZAAoA
hATZAA4AdQTZAAoALQTZAAoAMwbZAAYA9gWcAwYAbwHaBAYAlQQNBQYAIQTPAxIAPwEwAxIAoAEw
AxIAJwG6AwYAVAHtBAYAOgCcAwYA9gOcAwYAKQOcAwYAEAScAxYAEQClBBYAAQClBEcArwYAABYA
IgClBAYA+gCcAwYAqwCcAwYAAgfkAwAAAABAAAAAAAABAAEAAQAQAK8DAAAQAAEAAQABABAAaAQA
ADkAAgAFAAEAEAAVBgAARQACAAoAAQAQAOoFAABJAAQADgABABAAqwUAAEkABQAPAAAAEAAUBXAF
SQAGABEAAAEQANoFcAVhAAgAFQABAEMGfQAGAOoFgAAGAKsFhAABACMGiAABACMGiAARAKMDjAAR
ABcBkAARAJsAlABQIAAAAADGAPICBgABAFggAAAAAMYA/QIGAAEAYCAAAAAAxgDfBpgAAQCIIAAA
AACGGM0EBgACAJAgAAAAAIYYzQQbAAIAmyAAAAAAhgh+AAEABQCqIAAAAACGCG4DngAGAMEgAAAA
AIYA9gYrAAcAySAAAAAAhgD9BSsABwDRIAAAAACGGM0EBgAHAPEgAAAAAMYAjgajAAcAFiEAAAAA
xgGHBpgACwApIQAAAADGAd8GmAAMACshAAAAAIYYzQStAA0AOiEAAAAAhhjNBK0ADgBJIQAAAACG
CIsAswAPAG8hAAAAAIMYzQQGAA8AdyEAAAAAkwiRBLcADwCjIQAAAACTCP8AvAAPAKohAAAAAJMI
CwHBAA8AsiEAAAAAlggJBscAEAC5IQAAAACGGM0EBgAQAMEhAAAAAJEY0wTMABAAAAABAPoGAAAB
AIoEAAACALUFAAADADsEAAABAAkDAAABAAkDAAABAEkAAAACAM8AAAADAIoEAAAEADsEAAABAIoE
AAABAPoGAAABADkGAAABADkGAAABAAkDCQDNBAEAEQDNBAYAGQDNBAoAKQDNBBAAMQDNBBAAOQDN
BBAAQQDNBBAASQDNBBAAUQDNBBAAWQDNBBAAYQDNBBAAaQDNBAYAmQDNBAYAuQDNBBUAyQDNBAYA
iQDyAgYAiQD9AgYAcQDNBBsAcQCTAyUAcQCCAwEA2QDNBBAAcQD2BisAcQD9BSsAiQDNBAYA4QDj
BS8AiQDJBTYAkQDNBAYAiQCfBTwA8QCKA0EAiQDKBkcA+QCbBk0AEQG9AFQAEQH+Bl0AoQDNBGMA
wQDNBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALIBiQBzAA8BqQBzAA8B4wBrALIBAQF7ALIBAwABAAYAAwAHAAQA
CAAGAAAAggDQAAAAcgPUAAAAjwDQAAAAlQTYAAAAHwHdAAAADQbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAFEAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQASQYAAAAAEAAAAAAAAAAAAAAAdABmBgAAAAAEAAAAAAAA
AAAAAABrAJwDAAAAABAAAAAAAAAAAAAAAHQARQQAAAAAAAAAAAEAAAAeBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgA8
TW9kdWxlPgBJbnB1dElEAFNDXzJkNTIxNTYxNDBkZTQ4YTM5ZWMyYzEwY2EyZTMyODRhAG1zY29y
bGliAHNldF9tYXJrZXRpZABnZXRfbWFya2V0bWF4aWQAZGVmYXVsdEluc3RhbmNlAFJ1bnRpbWVU
eXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAElucHV0TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5QaXBlbGluZQBUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVB
dHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENv
bXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFz
c2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0
cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJp
YnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25p
bmcAU3RyaW5nAFN5c3RlbS5Db21wb25lbnRNb2RlbABTQ18yZDUyMTU2MTQwZGU0OGEzOWVjMmMx
MGNhMmUzMjg0YS5kbGwAc2V0X21hcmtldGlkX0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNldF9J
dGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNl
cHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1h
cABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGlu
ZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMmQ1MjE1
NjE0MGRlNDhhMzllYzJjMTBjYTJlMzI4NGEuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAFNDXzJkNTIxNTYxNDBkZTQ4YTM5ZWMyYzEwY2EyZTMyODRhLlByb3Bl
cnRpZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1u
SW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0AGdl
dF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABj
b3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlw
ZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRD
b21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vzc0lu
cHV0Um93AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AAAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQBy
AHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEA
cwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABp
AG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAwAAAbbQBhAHIAawBlAHQAXwBtAGEAeABfAGkA
ZAAAcVMAQwBfADIAZAA1ADIAMQA1ADYAMQA0ADAAZABlADQAOABhADMAOQBlAGMAMgBjADEAMABj
AGEAMgBlADMAMgA4ADQAYQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAARmeUISQjiUCkj5GO4Bld7gAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERWQkgAwESPR0IEkEF
IAIBCBwDIAACBiACAg4RdQUgAR0ICAQgABJ5BSABEn0cBQAAEoCBBiABHBKAhQgAARKAiRGAjQUg
ABKAkQcgAgEOEoCRCLd6XFYZNOCJCImEXc2AgMyRAgYIAwYSFAMGEhgDBhJFAwYSUQMGElUDBhIg
BSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFAyAACAQAABJRBAAAElUFAAEBElUEAAASIAMAAAED
KAAIAygAAgQIABJRBAgAElUECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRo
cm93cwEIAQACAAAAAAAoAQAjU0NfMmQ1MjE1NjE0MGRlNDhhMzllYzJjMTBjYTJlMzI4NGEAAAUB
AAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdodCBAIEhQIDIwMjMAAEkBABouTkVURnJhbWV3b3JrLFZl
cnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43BAEA
AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nv
cmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAA
AAAAAABQQURQQURQtAAAALQyAAAAAAAAAAAAAM4yAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADA
MgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMgBkADUAMgAxADUANgAxADQAMABkAGUANAA4AGEAMwA5AGUAYwAyAGMAMQAw
AGMAYQAyAGUAMwAyADgANABhAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAyAGQANQAy
ADEANQA2ADEANAAwAGQAZQA0ADgAYQAzADkAZQBjADIAYwAxADAAYwBhADIAZQAzADIAOAA0AGEA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwAyAGQANQAyADEANQA2ADEANAAwAGQAZQA0ADgAYQAzADkAZQBjADIAYwAxADAAYwBhADIA
ZQAzADIAOAA0AGEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMgBkADUAMgAxADUANgAxADQAMABkAGUANAA4AGEAMwA5AGUAYwAyAGMAMQAwAGMAYQAyAGUA
MwAyADgANABhAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA4DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_2d52156140de48a39ec2c10ca2e3284a</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::market_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">71</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Script Component.Outputs[Output 0].Columns[marketid]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Script Component.Outputs[Output 0].Columns[marketid]"
                          name="marketid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Sort.Inputs[Sort Input].Columns[market]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1].Columns[market]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]"
                          name="market"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1].Columns[market]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Market\Trim values"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Trim values"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Inputs[Derived Column Input].Columns[market]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="market"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Trim values.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output].Columns[market_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output].Columns[market_trimmed]"
                          name="market_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output].Columns[market]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(market)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Market\Trim values.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Aggregate Output 1]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Derived Column Output]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Market\Trim values.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Derived Column Output1]"
                  endId="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Lookup No Match Output]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\Market &amp; Region &amp; Country\Market\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[MarketNotNULL]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Lookup.Inputs[Lookup Input]"
                  name="MarketNotNULL"
                  startId="Package\Market &amp; Region &amp; Country\Market\Conditional Split.Outputs[MarketNotNULL]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[OLE DB Source Output]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\Market &amp; Region &amp; Country\Market\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Output 0]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\Market &amp; Region &amp; Country\Market\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Market.Paths[Sort Output]"
                  endId="Package\Market &amp; Region &amp; Country\Market\Trim values.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\Market &amp; Region &amp; Country\Market\Sort.Outputs[Sort Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Market &amp; Region &amp; Country\Region"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{8562519F-00D3-480B-9A40-87EBCB720B80}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Region"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add create &amp; update dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Inputs[Aggregate Input 1].Columns[region]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].Columns[region]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1].Columns[region]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1].Columns[region]"
                          name="region">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].Columns[region]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input].Columns[region_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region_trimmed"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[RegionNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="RegionNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(region_trimmed)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[RegionNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="RegionNotNULL"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Inputs[Derived Column Input].Columns[region]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output].Columns[region]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]"
                          name="region_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output].Columns[region]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(region)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Region]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Region]) [refTable]
where [refTable].[region] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="region" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input].Columns[region_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region_trimmed"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">region</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          name="id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          name="created_date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">created_date</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_Region]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[region_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region_trimmed"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[region]"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output].Columns[region_trimmed]" />
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[regionid]"
                          cachedDataType="i4"
                          cachedName="regionid"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Script Component.Outputs[Output 0].Columns[regionid]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].Columns[region]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].Columns[region]"
                          name="region"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[region]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[region]"
                          name="region" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 regionmaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["region_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.regionid = this.Variables.regionmaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 regionid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool regionid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Settings.get_Default():SC_10aca06cb4f84644bed483d49146f2d3.Properties.Sett" +
    "ings")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{02AF9EC2-51A2-49DE-AB40-F6010BC98DB0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_10aca06cb4f84644bed483d49146f2d3</RootNamespace>
    <AssemblyName>SC_10aca06cb4f84644bed483d49146f2d3</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>SC_10aca06cb4f84644bed483d49146f2d3</msb:CodeName>
    <msb:DisplayName>SC_10aca06cb4f84644bed483d49146f2d3</msb:DisplayName>
    <msb:ProjectId>{4B6E083B-3F8A-4A97-8321-930EFFACE805}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_10aca06cb4f84644bed483d49146f2d3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ComponentWrapper.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALuwe2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA4jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAJAyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA6BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADE
MgAAAAAAAEgAAAACAAUA0CEAAAgQAAABAAAAAAAAANgxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLKAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAAAwH
AAAjU3RyaW5ncwAAAAAADQAAPAEAACNVUwA8DgAAEAAAACNHVUlEAAAATA4AALwBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABGAwEAAAAAAAYAQALtBAYA1ALtBAYAjAHaBA8AYQUA
AAYAuQHkAwYAIwLkAwYABALkAwYAuwLkAwYAYALkAwYAeQLkAwYA0AHkAwYA6wEPAwoAlALZAAoA
hATZAA4AdQTZAAoALQTZAAoAMwbZAAYA9gWcAwYAbwHaBAYAlQQNBQYAIQTPAxIAPwEwAxIAoAEw
AxIAJwG6AwYAVAHtBAYAOgCcAwYA9gOcAwYAKQOcAwYAEAScAxYAEQClBBYAAQClBEcArwYAABYA
IgClBAYA+gCcAwYAqwCcAwYAAgfkAwAAAABkAAAAAAABAAEAAQAQAK8DAAAQAAEAAQABABAAaAQA
ADkAAgAFAAEAEAAVBgAARQACAAoAAQAQAOoFAABJAAQADgABABAAqwUAAEkABQAPAAAAEAAUBXAF
SQAGABEAAAEQANoFcAVhAAgAFQABAEMGfQAGAOoFgAAGAKsFhAABACMGiAABACMGiAARAKMDjAAR
ABcBkAARAJsAlABQIAAAAADGAPICBgABAFggAAAAAMYA/QIGAAEAYCAAAAAAxgDfBpgAAQCIIAAA
AACGGM0EBgACAJAgAAAAAIYYzQQbAAIAmyAAAAAAhgh+AAEABQCqIAAAAACGCG4DngAGAMEgAAAA
AIYA9gYrAAcAySAAAAAAhgD9BSsABwDRIAAAAACGGM0EBgAHAPEgAAAAAMYAjgajAAcAFiEAAAAA
xgGHBpgACwApIQAAAADGAd8GmAAMACshAAAAAIYYzQStAA0AOiEAAAAAhhjNBK0ADgBJIQAAAACG
CIsAswAPAG8hAAAAAIMYzQQGAA8AdyEAAAAAkwiRBLcADwCjIQAAAACTCP8AvAAPAKohAAAAAJMI
CwHBAA8AsiEAAAAAlggJBscAEAC5IQAAAACGGM0EBgAQAMEhAAAAAJEY0wTMABAAAAABAPoGAAAB
AIoEAAACALUFAAADADsEAAABAAkDAAABAAkDAAABAG0AAAACAM8AAAADAIoEAAAEADsEAAABAIoE
AAABAPoGAAABADkGAAABADkGAAABAAkDCQDNBAEAEQDNBAYAGQDNBAoAKQDNBBAAMQDNBBAAOQDN
BBAAQQDNBBAASQDNBBAAUQDNBBAAWQDNBBAAYQDNBBAAaQDNBAYAmQDNBAYAuQDNBBUAyQDNBAYA
iQDyAgYAiQD9AgYAcQDNBBsAcQCTAyUAcQCCAwEA2QDNBBAAcQD2BisAcQD9BSsAiQDNBAYA4QDj
BS8AiQDJBTYAkQDNBAYAiQCfBTwA8QCKA0EAiQDKBkcA+QCbBk0AEQG9AFQAEQH+Bl0AoQDNBGMA
wQDNBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALYBiQBzAA8BqQBzAA8B4wBrALYBAQF7ALYBAwABAAYAAwAHAAQA
CAAGAAAAggDQAAAAcgPUAAAAjwDQAAAAlQTYAAAAHwHdAAAADQbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQASQYAAAAAEAAAAAAAAAAAAAAAdABmBgAAAAAEAAAAAAAA
AAAAAABrAJwDAAAAABAAAAAAAAAAAAAAAHQARQQAAAAAAAAAAAEAAAAeBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgBT
Q18xMGFjYTA2Y2I0Zjg0NjQ0YmVkNDgzZDQ5MTQ2ZjJkMwA8TW9kdWxlPgBJbnB1dElEAG1zY29y
bGliAHNldF9yZWdpb25pZABnZXRfcmVnaW9ubWF4aWQAZGVmYXVsdEluc3RhbmNlAFJ1bnRpbWVU
eXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAElucHV0TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5QaXBlbGluZQBUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVB
dHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENv
bXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFz
c2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0
cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJp
YnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25p
bmcAU3RyaW5nAFN5c3RlbS5Db21wb25lbnRNb2RlbABTQ18xMGFjYTA2Y2I0Zjg0NjQ0YmVkNDgz
ZDQ5MTQ2ZjJkMy5kbGwAc2V0X3JlZ2lvbmlkX0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNldF9J
dGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNl
cHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1h
cABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGlu
ZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTBhY2Ew
NmNiNGY4NDY0NGJlZDQ4M2Q0OTE0NmYyZDMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAFNDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkxNDZmMmQzLlByb3Bl
cnRpZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1u
SW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0AGdl
dF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABj
b3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlw
ZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRD
b21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vzc0lu
cHV0Um93AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AAAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQBy
AHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEA
cwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABp
AG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAwAAAbcgBlAGcAaQBvAG4AXwBtAGEAeABfAGkA
ZAAAcVMAQwBfADEAMABhAGMAYQAwADYAYwBiADQAZgA4ADQANgA0ADQAYgBlAGQANAA4ADMAZAA0
ADkAMQA0ADYAZgAyAGQAMwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUA
cwAAKk3FZ0S6+kGgyRe2laKGngAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERWQkgAwESPR0IEkEF
IAIBCBwDIAACBiACAg4RdQUgAR0ICAQgABJ5BSABEn0cBQAAEoCBBiABHBKAhQgAARKAiRGAjQUg
ABKAkQcgAgEOEoCRCLd6XFYZNOCJCImEXc2AgMyRAgYIAwYSFAMGEhgDBhJFAwYSUQMGElUDBhIg
BSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFAyAACAQAABJRBAAAElUFAAEBElUEAAASIAMAAAED
KAAIAygAAgQIABJRBAgAElUECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRo
cm93cwEIAQACAAAAAAAoAQAjU0NfMTBhY2EwNmNiNGY4NDY0NGJlZDQ4M2Q0OTE0NmYyZDMAAAUB
AAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdodCBAIEhQIDIwMjMAAE0BABwuTkVURnJhbWV3b3JrLFZl
cnNpb249djQuNy4yAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRQuTkVUIEZyYW1ld29yayA0Ljcu
MgQBAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAAC4MgAAAAAAAAAAAADSMgAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAxDIAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBk
ADQAOQAxADQANgBmADIAZAAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAxADAAYQBj
AGEAMAA2AGMAYgA0AGYAOAA0ADYANAA0AGIAZQBkADQAOAAzAGQANAA5ADEANAA2AGYAMgBkADMA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwAxADAAYQBjAGEAMAA2AGMAYgA0AGYAOAA0ADYANAA0AGIAZQBkADQAOAAzAGQANAA5ADEA
NAA2AGYAMgBkADMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBkADQAOQAxADQA
NgBmADIAZAAzAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA5DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_10aca06cb4f84644bed483d49146f2d3</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::region_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">71</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Market &amp; Region &amp; Country\Region\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Script Component.Outputs[Output 0].Columns[regionid]"
                          dataType="i4"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Script Component.Outputs[Output 0].Columns[regionid]"
                          name="regionid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Market &amp; Region &amp; Country\Region\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Market &amp; Region &amp; Country\Region\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Sort.Inputs[Sort Input].Columns[region]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="region"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1].Columns[region]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output].Columns[region]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output].Columns[region]"
                          name="region"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1].Columns[region]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Aggregate Output 1]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Derived Column Output]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Derived Column Output1]"
                  endId="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Lookup No Match Output]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\Market &amp; Region &amp; Country\Region\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[OLE DB Source Output]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\Market &amp; Region &amp; Country\Region\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Output 0]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\Market &amp; Region &amp; Country\Region\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[RegionNotNULL]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Lookup.Inputs[Lookup Input]"
                  name="RegionNotNULL"
                  startId="Package\Market &amp; Region &amp; Country\Region\Conditional Split.Outputs[RegionNotNULL]" />
                <path
                  refId="Package\Market &amp; Region &amp; Country\Region.Paths[Sort Output]"
                  endId="Package\Market &amp; Region &amp; Country\Region\Derived Column.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\Market &amp; Region &amp; Country\Region\Sort.Outputs[Sort Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{6C731B14-49CC-4605-9B7F-66CF9D46870A}"
          DTS:From="Package\Market &amp; Region &amp; Country\Find max id of Market"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Market &amp; Region &amp; Country\Market" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{461B3B53-0064-45E6-86B9-9457572EDF86}"
          DTS:From="Package\Market &amp; Region &amp; Country\Find max id of Region"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Market &amp; Region &amp; Country\Region" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{A3722F0B-23F9-4984-9728-4637EA2E078F}"
          DTS:From="Package\Market &amp; Region &amp; Country\Find max id of Country"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Market &amp; Region &amp; Country\Country" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Postal Code"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{2BF53B92-8200-41FC-B7EA-AD7D94C9EDB7}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Postal Code">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Postal Code\Find max id of Postal Code"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{CD3F446A-AF4B-44F2-BC26-B4604F2EC098}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of Postal Code"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_PostalCode"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::postal_code_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Postal Code\Postal Code"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{1D0B499C-FB6C-4194-B00D-793836AF116D}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Postal Code"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Postal Code\Postal Code\Add create &amp; update dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add create &amp; update dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[postal_code]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[city]"
                          name="city">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[postal_code]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[postal_code]"
                          name="postal_code">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[postal_code]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          name="state">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Check if exist City"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist City"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_City]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_City]) [refTable]
where [refTable].[city] = ? and [refTable].[country_id] = ? and [refTable].[state_id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="city" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]};#{Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[country_id_from_state]};#{Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[state_id]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Check if exist City.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input].Columns[city_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city_trimmed"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">city</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input].Columns[country_id_from_state]"
                          cachedDataType="i4"
                          cachedName="country_id_from_state"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[country_id_from_state]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input].Columns[state_id]"
                          cachedDataType="i4"
                          cachedName="state_id"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[state_id]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">state_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]"
                          name="city_id_lookedup"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]"
                          name="state_id_lookedup"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">state_id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          name="country_id_lookedup"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">country_id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Check if exist Country"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist Country"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Country]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Country]) [refTable]
where [refTable].[country] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Check if exist Country.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output].Columns[country_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output].Columns[country_id]"
                          name="country_id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Check if exist State"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist State"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_State]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_State]) [refTable]
where [refTable].[state] = ? and [refTable].[country_id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]};#{Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output].Columns[country_id]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Check if exist State.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input].Columns[state_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state_trimmed"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">state</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input].Columns[country_id]"
                          cachedDataType="i4"
                          cachedName="country_id"
                          lineageId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output].Columns[country_id]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[country_id_from_state]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[country_id_from_state]"
                          name="country_id_from_state"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">country_id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[state_id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output].Columns[state_id]"
                          name="state_id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Conditional Split.Outputs[PostalCodeNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="PostalCodeNULL"
                      synchronousInputId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(postal_code)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Conditional Split.Outputs[PostalCodeNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="PostalCodeNotNULL"
                      synchronousInputId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[city]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[state]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[country]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[city_trimmed]"
                          name="city_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[city]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(city)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          name="state_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[state]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(state)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          name="country_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[country]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(country)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Derived Column 2"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column 2"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Derived Column 2.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Derived Column 2.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Derived Column 2.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Insert Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="Insert Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_PostalCode]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Insert Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[id]"
                          cachedDataType="i4"
                          cachedName="id"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[postal_code]"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[city_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="city_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[city_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[state_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="state_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[created_date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[created_date]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output].Columns[updated_Date]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[city_id]"
                          dataType="i4"
                          name="city_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          dataType="i4"
                          name="state_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          dataType="i4"
                          name="country_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Insert Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Insert Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Insert Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Insert Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_PostalCode]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_PostalCode]) [refTable]
where [refTable].[postal_code] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="postal_code" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="city_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">postal_code</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]"
                          name="id"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[created_date]"
                          name="created_date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">created_date</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\OLE DB Command"
                  componentClassID="Microsoft.OLEDBCommand"
                  contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
                  name="OLE DB Command"
                  usesDispositions="true"
                  version="2">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">UPDATE [dbo].[NDS_PostalCode] SET [city_id] = ?,[country_id] = ?,[created_date] = ?,[postal_code] = ?,[state_id] = ?,[updated_date] = ? WHERE [id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\OLE DB Command.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input]"
                      errorOrTruncationOperation="Command Execution"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Command Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[city_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="city_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[created_date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[created_date]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[id]"
                          cachedDataType="i4"
                          cachedName="id"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[state_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="state_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                          lineageId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output].Columns[updated_Date]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          dataType="i4"
                          name="Param_0">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          dataType="i4"
                          name="Param_1">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          dataType="dbTimeStamp"
                          name="Param_2">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          dataType="i4"
                          name="Param_3">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                          dataType="i4"
                          name="Param_4">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                          dataType="dbTimeStamp"
                          name="Param_5">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">65</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                          dataType="i4"
                          name="Param_6">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Output]"
                      exclusionGroup="1"
                      name="OLE DB Command Output"
                      synchronousInputId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Command Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\OLE DB Command 1"
                  componentClassID="Microsoft.OLEDBCommand"
                  contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
                  name="OLE DB Command 1"
                  usesDispositions="true"
                  version="2">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">UPDATE [dbo].[NDS_PostalCode] SET [city_id] = ?,[country_id] = ?,[state_id] = ? WHERE [id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\OLE DB Command 1.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input]"
                      errorOrTruncationOperation="Command Execution"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Command Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].Columns[city_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="city_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].Columns[id]"
                          cachedDataType="i4"
                          cachedName="id"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].Columns[state_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="state_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          dataType="i4"
                          name="Param_0">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          dataType="i4"
                          name="Param_1">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                          dataType="i4"
                          name="Param_2">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                          dataType="i4"
                          name="Param_3">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Output]"
                      exclusionGroup="1"
                      name="OLE DB Command Output"
                      synchronousInputId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Command Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Command 1.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_PostalCode]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[postalcodeid]"
                          cachedDataType="i4"
                          cachedName="postalcodeid"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\Postal Code\Postal Code\Script Component.Outputs[Output 0].Columns[postalcodeid]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          cachedSortKeyPosition="1"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[postal_code]"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[city_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="city_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[city_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[state_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="state_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]" />
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[city_id]"
                          dataType="i4"
                          name="city_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state_id]"
                          dataType="i4"
                          name="state_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          dataType="i4"
                          name="country_id" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[city]"
                          name="city"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[postal_code]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[postal_code]"
                          name="postal_code"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          name="state"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          name="country"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[city]"
                          name="city" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[postal_code]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[postal_code]"
                          name="postal_code" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          name="state" />
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          name="country" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 postalcodemaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["postal_code_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.postalcodeid = this.Variables.postalcodemaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 postalcodeid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool postalcodeid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Settings.get_Default():SC_10aca06cb4f84644bed483d49146f2d3.Properties.Sett" +
    "ings")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{02AF9EC2-51A2-49DE-AB40-F6010BC98DB0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_10aca06cb4f84644bed483d49146f2d3</RootNamespace>
    <AssemblyName>SC_EDF1FAAAF1C048DF92F03D476BF85F96</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_10aca06cb4f84644bed483d49146f2d3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_10aca06cb4f84644bed483d49146f2d3</msb:DisplayName>
    <msb:ProjectId>{408B5F05-0991-4111-96E4-CFEECC4DCF20}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_10aca06cb4f84644bed483d49146f2d3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_EDF1FAAAF1C048DF92F03D476BF85F96.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAKXCe2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA9jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKQyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA/BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADY
MgAAAAAAAEgAAAACAAUA0CEAABwQAAABAAAAAAAAAOwxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLUAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAABgH
AAAjU3RyaW5ncwAAAAAMDQAASAEAACNVUwBUDgAAEAAAACNHVUlEAAAAZA4AALgBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABOAwEAAAAAAAYASAL5BAYA3AL5BAYAlAHmBA8AbQUA
AAYAwQHwAwYAKwLwAwYADALwAwYAwwLwAwYAaALwAwYAgQLwAwYA2AHwAwYA8wEXAwoAnALhAAoA
kAThAA4AgQThAAoAOQThAAoAPwbhAAYAAgaoAwYAdwHmBAYAoQQZBQYALQTbAxIARwE4AxIAqAE4
AxIALwHGAwYAXAH5BAYAOgCoAwYAAgSoAwYAMQOoAwYAHASoAxYAEQCxBBYAAQCxBEcAuwYAABYA
IgCxBAYAAgGoAwYAswCoAwYADgfwAwAAAABkAAAAAAABAAEAAQAQALsDAAAQAAEAAQABABAAdAQA
ADkAAgAFAAEAEAAhBgAARQACAAoAAQAQAPYFAABJAAQADgABABAAtwUAAEkABQAPAAAAEAAgBXwF
SQAGABEAAAEQAOYFfAVhAAgAFQABAE8GfQAGAPYFgAAGALcFhAABAC8GiAABAC8GiAARAK8DjAAR
AB8BkAARAKMAlABQIAAAAADGAPoCBgABAFggAAAAAMYABQMGAAEAYCAAAAAAxgDrBpgAAQCIIAAA
AACGGNkEBgACAJAgAAAAAIYY2QQbAAIAmyAAAAAAhgh+AAEABQCqIAAAAACGCHYDngAGAMEgAAAA
AIYAAgcrAAcAySAAAAAAhgAJBisABwDRIAAAAACGGNkEBgAHAPEgAAAAAMYAmgajAAcAFiEAAAAA
xgGTBpgACwApIQAAAADGAesGmAAMACshAAAAAIYY2QStAA0AOiEAAAAAhhjZBK0ADgBJIQAAAACG
CI8AswAPAG8hAAAAAIMY2QQGAA8AdyEAAAAAkwidBLcADwCjIQAAAACTCAcBvAAPAKohAAAAAJMI
EwHBAA8AsiEAAAAAlggVBscAEAC5IQAAAACGGNkEBgAQAMEhAAAAAJEY3wTMABAAAAABAAYHAAAB
AJYEAAACAMEFAAADAEcEAAABABEDAAABABEDAAABAG0AAAACANcAAAADAJYEAAAEAEcEAAABAJYE
AAABAAYHAAABAEUGAAABAEUGAAABABEDCQDZBAEAEQDZBAYAGQDZBAoAKQDZBBAAMQDZBBAAOQDZ
BBAAQQDZBBAASQDZBBAAUQDZBBAAWQDZBBAAYQDZBBAAaQDZBAYAmQDZBAYAuQDZBBUAyQDZBAYA
iQD6AgYAiQAFAwYAcQDZBBsAcQCfAyUAcQCOAwEA2QDZBBAAcQACBysAcQAJBisAiQDZBAYA4QDv
BS8AiQDVBTYAkQDZBAYAiQCrBTwA8QCWA0EAiQDWBkcA+QCnBk0AEQHFAFQAEQEKB10AoQDZBGMA
wQDZBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALIBiQBzAA8BqQBzAA8B4wBrALIBAQF7ALIBAwABAAYAAwAHAAQA
CAAGAAAAggDQAAAAegPUAAAAkwDQAAAAoQTYAAAAJwHdAAAAGQbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQAVQYAAAAAEAAAAAAAAAAAAAAAdAByBgAAAAAEAAAAAAAA
AAAAAABrAKgDAAAAABAAAAAAAAAAAAAAAHQAUQQAAAAAAAAAAAEAAAAqBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgBT
Q19FREYxRkFBQUYxQzA0OERGOTJGMDNENDc2QkY4NUY5NgA8TW9kdWxlPgBJbnB1dElEAG1zY29y
bGliAHNldF9wb3N0YWxjb2RlaWQAZ2V0X3Bvc3RhbGNvZGVtYXhpZABkZWZhdWx0SW5zdGFuY2UA
UnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3Vy
Y2VDdWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRy
aWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5
UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmls
aXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUu
VmVyc2lvbmluZwBTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDX0VERjFGQUFBRjFDMDQ4
REY5MkYwM0Q0NzZCRjg1Rjk2LmRsbABzZXRfcG9zdGFsY29kZWlkX0lzTnVsbABTZXROdWxsAGdl
dF9JdGVtAHNldF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25m
aWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRP
cGVyYXRpb25FeGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1l
TWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1
ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJj
ZXMAU0NfMTBhY2EwNmNiNGY4NDY0NGJlZDQ4M2Q0OTE0NmYyZDMuUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkx
NDZmMmQzLlByb3BlcnRpZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4
ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVu
ZE9mUm93c2V0AGdldF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlw
dENvbXBvbmVudABjb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29u
dGV4dABTY3JpcHRDb21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1
dDBfUHJvY2Vzc0lucHV0Um93AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AAAAgJtJAHMATgB1AGwAbAAg
AHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEA
bABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBv
AGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAwAAAlcABvAHMAdABhAGwA
XwBjAG8AZABlAF8AbQBhAHgAXwBpAGQAAHFTAEMAXwAxADAAYQBjAGEAMAA2AGMAYgA0AGYAOAA0
ADYANAA0AGIAZQBkADQAOAAzAGQANAA5ADEANAA2AGYAMgBkADMALgBQAHIAbwBwAGUAcgB0AGkA
ZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAABE0krtSbmkmAd4RgV7lL3AAEIAEBCAMgAAEFIAEB
EREEIAEBDgUgAQERWQkgAwESPR0IEkEFIAIBCBwDIAACBiACAg4RdQUgAR0ICAQgABJ5BSABEn0c
BQAAEoCBBiABHBKAhQgAARKAiRGAjQUgABKAkQcgAgEOEoCRCLd6XFYZNOCJCImEXc2AgMyRAgYI
AwYSFAMGEhgDBhJFAwYSUQMGElUDBhIgBSABARIMBCABAQIJIAQBCA4SPRJBBSABARJFAyAACAQA
ABJRBAAAElUFAAEBElUEAAASIAMAAAEDKAAIAygAAgQIABJRBAgAElUECAASIAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfMTBhY2EwNmNiNGY4
NDY0NGJlZDQ4M2Q0OTE0NmYyZDMAAAUBAAAAAAcBAAJIUAAAGAEAE0NvcHlyaWdodCBAIEhQIDIw
MjMAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5h
bWUSLk5FVCBGcmFtZXdvcmsgNC43BAEAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAMwyAAAAAAAAAAAAAOYyAAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYMgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUu
ZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBk
ADQAOQAxADQANgBmADIAZAAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwBFAEQARgAx
AEYAQQBBAEEARgAxAEMAMAA0ADgARABGADkAMgBGADAAMwBEADQANwA2AEIARgA4ADUARgA5ADYA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwBFAEQARgAxAEYAQQBBAEEARgAxAEMAMAA0ADgARABGADkAMgBGADAAMwBEADQANwA2AEIA
RgA4ADUARgA5ADYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBkADQAOQAxADQA
NgBmADIAZAAzAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA+DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_edf1faaaf1c048df92f03d476bf85f96</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::postal_code_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">24</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Postal Code\Postal Code\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Script Component.Outputs[Output 0].Columns[postalcodeid]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Script Component.Outputs[Output 0].Columns[postalcodeid]"
                          name="postalcodeid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Slowly Changing Dimension"
                  componentClassID="Microsoft.SCD"
                  contactInfo="Slowly Changing Dimension;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Updates a SQL Server Analysis Services data warehouse dimension. Update dimension records that are already present and  insert dimension records that aren't. For example, update the DimProduct table of the AdventureWorksDW OLAP database with data from the Products table in the AdventureWorks OLTP database."
                  name="Slowly Changing Dimension"
                  version="3">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SELECT statement used to create a schema rowset."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT [city_id], [country_id], [id], [state_id] FROM [dbo].[NDS_PostalCode]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the WHERE clause in the SELECT statement that selects the current row among rows with identical business keys."
                      name="CurrentRowWhere"></property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether historical attribute updates are directed to the transformation output for changing attribute updates."
                      name="UpdateChangingAttributeHistory">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the transformation fails when columns with fixed attributes contain changes."
                      name="FailOnFixedAttributeChange">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies the column name for the inferred member."
                      name="InferredMemberIndicator"></property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether inferred member updates are detected."
                      name="EnableInferredMember">true</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the transformation fails when a lookup of an existing record fails."
                      name="FailOnLookupFailure">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies that all rows in the input are new or the transformation detects the change type."
                      name="IncomingRowChangeType"
                      typeConverter="IncomingRowChangeType">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Connections[LookupConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Defines the connection to use for lookups in the dimension table"
                      name="LookupConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]"
                      name="Slowly Changing Dimension Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].Columns[city_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="city_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[city_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              name="ColumnType"
                              typeConverter="ColumnType">2</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[country_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              name="ColumnType"
                              typeConverter="ColumnType">2</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].Columns[id]"
                          cachedDataType="i4"
                          cachedName="id"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[id]"
                          lineageId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output].Columns[id]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              name="ColumnType"
                              typeConverter="ColumnType">1</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].Columns[state_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="state_id_lookedup"
                          externalMetadataColumnId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[state_id]"
                          lineageId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              name="ColumnType"
                              typeConverter="ColumnType">2</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[city_id]"
                          dataType="i4"
                          name="city_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[country_id]"
                          dataType="i4"
                          name="country_id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input].ExternalColumns[state_id]"
                          dataType="i4"
                          name="state_id" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Unchanged Output]"
                      description="Unchanged rows"
                      exclusionGroup="1"
                      name="Unchanged Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[New Output]"
                      description="New rows"
                      exclusionGroup="1"
                      name="New Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Fixed Attribute Output]"
                      description="Rows with changes in columns tagged FixedAttribute"
                      exclusionGroup="1"
                      name="Fixed Attribute Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Changing Attribute Updates Output]"
                      description="These rows contain new information for ChangingAttribute (Type 1) column changes"
                      exclusionGroup="1"
                      name="Changing Attribute Updates Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Historical Attribute Inserts Output]"
                      description="HistoricalAttribute (Type 2) changes result in these new rows"
                      exclusionGroup="2"
                      name="Historical Attribute Inserts Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Inferred Member Updates Output]"
                      description="Information to update unpopulated initial dimension row"
                      exclusionGroup="1"
                      name="Inferred Member Updates Output"
                      synchronousInputId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Postal Code\Postal Code\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input].Columns[city]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="city"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[city]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input].Columns[postal_code]"
                          cachedDataType="i4"
                          cachedName="postal_code"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[postal_code]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[state]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[country]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[city]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[city]"
                          name="city">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[city]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]"
                          dataType="i4"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[postal_code]"
                          name="postal_code"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[postal_code]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[state]"
                          name="state">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[state]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1].Columns[country]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Aggregate Output 1]"
                  endId="Package\Postal Code\Postal Code\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\Postal Code\Postal Code\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Changing Attribute Updates Output]"
                  endId="Package\Postal Code\Postal Code\OLE DB Command 1.Inputs[OLE DB Command Input]"
                  name="Changing Attribute Updates Output"
                  startId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Changing Attribute Updates Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Derived Column Output]"
                  endId="Package\Postal Code\Postal Code\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Postal Code\Postal Code\Add create &amp; update dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Derived Column Output1]"
                  endId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Inputs[Slowly Changing Dimension Input]"
                  name="Derived Column Output"
                  startId="Package\Postal Code\Postal Code\Derived Column 2.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Derived Column Output2]"
                  endId="Package\Postal Code\Postal Code\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\Postal Code\Postal Code\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Inferred Member Updates Output]"
                  endId="Package\Postal Code\Postal Code\OLE DB Command.Inputs[OLE DB Command Input]"
                  name="Inferred Member Updates Output"
                  startId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[Inferred Member Updates Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Lookup Match Output]"
                  endId="Package\Postal Code\Postal Code\Derived Column 2.Inputs[Derived Column Input]"
                  name="Lookup Match Output"
                  startId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Lookup Match Output1]"
                  endId="Package\Postal Code\Postal Code\Check if exist State.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\Postal Code\Postal Code\Check if exist Country.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Lookup Match Output2]"
                  endId="Package\Postal Code\Postal Code\Check if exist City.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\Postal Code\Postal Code\Check if exist State.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Lookup Match Output3]"
                  endId="Package\Postal Code\Postal Code\Lookup.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\Postal Code\Postal Code\Check if exist City.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Lookup No Match Output]"
                  endId="Package\Postal Code\Postal Code\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\Postal Code\Postal Code\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[New Output]"
                  endId="Package\Postal Code\Postal Code\Insert Destination.Inputs[OLE DB Destination Input]"
                  name="New Output"
                  startId="Package\Postal Code\Postal Code\Slowly Changing Dimension.Outputs[New Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[OLE DB Source Output]"
                  endId="Package\Postal Code\Postal Code\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\Postal Code\Postal Code\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Output 0]"
                  endId="Package\Postal Code\Postal Code\Add create &amp; update dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\Postal Code\Postal Code\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[PostalCodeNotNULL]"
                  endId="Package\Postal Code\Postal Code\Check if exist Country.Inputs[Lookup Input]"
                  name="PostalCodeNotNULL"
                  startId="Package\Postal Code\Postal Code\Conditional Split.Outputs[PostalCodeNotNULL]" />
                <path
                  refId="Package\Postal Code\Postal Code.Paths[Sort Output]"
                  endId="Package\Postal Code\Postal Code\Derived Column.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\Postal Code\Postal Code\Sort.Outputs[Sort Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Postal Code.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{CB28E944-7CFD-42F9-920F-5DEE5AD4151E}"
          DTS:From="Package\Postal Code\Find max id of Postal Code"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Postal Code\Postal Code" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\State"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{71C92B07-DFF3-46B9-B0EB-1C5A1631997A}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="State">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\State\Find max id of State"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{EA10733D-46EC-4D3C-BEBC-ACE72E4EA4FF}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Find max id of State"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2022; © 2022 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{97923543-993D-4C1A-910C-9D7C63BE69C8}"
              SQLTask:SqlStatementSource="select ISNULL(max(id), 0) &#xA;from NDS_State"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::state_max_id" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\State\State"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{39B1A624-0877-4409-B580-0A0B6DEB2D4F}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="State"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\State\State\Add create &amp; update dates"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Add create &amp; update dates"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\State\State\Add create &amp; update dates.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\State\State\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]"
                          name="created_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]"
                          name="updated_Date"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\State\State\Add create &amp; update dates.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Aggregate"
                  componentClassID="Microsoft.Aggregate"
                  contactInfo="Aggregate;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;3"
                  description="Aggregates data with functions such as Average, Sum, Count, Max, and Min. For example, group data to compute the sum of sales per product or the average visits per day."
                  name="Aggregate"
                  version="3">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                      name="KeyScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                      name="Keys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the approximate number of distinct values in a column that the aggregation counts distinctly. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no CountDistinctScale value is used."
                      name="CountDistinctScale"
                      typeConverter="KeyScaleType">0</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the exact number of distinct values in a column that the aggregation counts distinctly. If a CountDistinctScale value is specified, the value in CountDistinctKeys takes precedence."
                      name="CountDistinctKeys" />
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage by which memory can be extended during the aggregation. Valid values are between 1 and 100."
                      name="AutoExtendFactor">25</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\State\State\Aggregate.Inputs[Aggregate Input 1]"
                      name="Aggregate Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Aggregate.Inputs[Aggregate Input 1].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]" />
                        <inputColumn
                          refId="Package\State\State\Aggregate.Inputs[Aggregate Input 1].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Aggregate.Outputs[Aggregate Output 1]"
                      name="Aggregate Output 1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the approximate number of group by keys that the aggregation produces. Low indicates 500,000 key values, Medium indicates 5 million key values, and High indicates more than 25 million key values. Unspecified indicates no KeyScale value is used."
                          name="KeyScale"
                          typeConverter="KeyScaleType">0</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the exact number of group by keys that the aggregation produces. If a KeyScale value is specified, the value in Keys takes precedence."
                          name="Keys" />
                      </properties>
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[state]"
                          name="state">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the input column used in the aggregation."
                              name="AggregationColumnId">#{Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]}</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the type of aggregation."
                              name="AggregationType"
                              typeConverter="AggregationType">0</property>
                            <property
                              dataType="System.Int32"
                              description="Indicates whether the column requires special handling because it may contain oversized data or it requires precision beyond a float data type."
                              name="IsBig">1</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the string comparison options."
                              name="AggregationComparisonFlags">0</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Check if exist country"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Check if exist country"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_Country]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_Country]) [refTable]
where [refTable].[country] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\State\State\Check if exist country.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\State\State\Check if exist country.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Check if exist country.Inputs[Lookup Input].Columns[country_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country_trimmed"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Check if exist country.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\State\State\Check if exist country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\State\State\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]"
                          name="country_id_lookedup"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">id</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Check if exist country.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\State\State\Check if exist country.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Check if exist country.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\State\State\Check if exist country.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\Check if exist country.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\State\State\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Conditional Split.Inputs[Conditional Split Input].Columns[state_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state_trimmed"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Conditional Split.Outputs[StateNULL]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="StateNULL"
                      synchronousInputId="Package\State\State\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[ISNULL](#{Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">ISNULL(state_trimmed)</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Conditional Split.Outputs[StateNotNULL]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="StateNotNULL"
                      synchronousInputId="Package\State\State\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\State\State\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\State\State\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Derived Column.Inputs[Derived Column Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\State\State\Sort.Outputs[Sort Output].Columns[country]" />
                        <inputColumn
                          refId="Package\State\State\Derived Column.Inputs[Derived Column Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          cachedSortKeyPosition="1"
                          lineageId="Package\State\State\Sort.Outputs[Sort Output].Columns[state]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\State\State\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[country_trimmed]"
                          name="country_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\State\State\Sort.Outputs[Sort Output].Columns[country]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(country)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]"
                          name="state_trimmed"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[TRIM](#{Package\State\State\Sort.Outputs[Sort Output].Columns[state]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">TRIM(state)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\State\State\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Lookup"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[NDS_State]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[NDS_State]) [refTable]
where [refTable].[state] = ? and [refTable].[country_id] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">1</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="state" dataType="DT_WSTR" length="255" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="country_id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="created_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="updated_date" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]};#{Package\State\State\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\State\State\Lookup.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\State\State\Lookup.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Lookup.Inputs[Lookup Input].Columns[state_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state_trimmed"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">state</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\State\State\Lookup.Inputs[Lookup Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          lineageId="Package\State\State\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">country_id</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Lookup.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\State\State\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Lookup.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\State\State\Lookup.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\State\State\Lookup.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\State\State\Lookup.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\Lookup.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\Lookup.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\OLE DB Destination"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[NDS_State]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\State\State\OLE DB Destination.Connections[OleDbConnection]"
                      connectionManagerID="{97923543-993D-4C1A-910C-9D7C63BE69C8}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD.NDS_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[created_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="created_Date"
                          externalMetadataColumnId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[created_Date]" />
                        <inputColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[updated_Date]"
                          cachedDataType="dbTimeStamp"
                          cachedName="updated_Date"
                          externalMetadataColumnId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          lineageId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output].Columns[updated_Date]" />
                        <inputColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[stateid]"
                          cachedDataType="i4"
                          cachedName="stateid"
                          externalMetadataColumnId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          lineageId="Package\State\State\Script Component.Outputs[Output 0].Columns[stateid]" />
                        <inputColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[state_trimmed]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state_trimmed"
                          externalMetadataColumnId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state]"
                          lineageId="Package\State\State\Derived Column.Outputs[Derived Column Output].Columns[state_trimmed]" />
                        <inputColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[country_id_lookedup]"
                          cachedDataType="i4"
                          cachedName="country_id_lookedup"
                          externalMetadataColumnId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          lineageId="Package\State\State\Check if exist country.Outputs[Lookup Match Output].Columns[country_id_lookedup]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id]"
                          dataType="i4"
                          name="id" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[created_date]"
                          dataType="dbTimeStamp"
                          name="created_date" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[updated_date]"
                          dataType="dbTimeStamp"
                          name="updated_date" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[country_id]"
                          dataType="i4"
                          name="country_id" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\OLE DB Source"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="OLE DB Source"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[Stage_Address]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1258</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\State\State\OLE DB Source.Connections[OleDbConnection]"
                      connectionManagerID="{DF370CB7-DC68-4721-ADC8-988F986BD9B4}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CLOUD Stage_SuperStore]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          length="255"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[country]"
                          name="country"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          dataType="wstr"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          length="255"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].Columns[state]"
                          name="state"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[city]"
                          dataType="wstr"
                          length="255"
                          name="city" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[state]"
                          dataType="wstr"
                          length="255"
                          name="state" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[market]"
                          dataType="wstr"
                          length="255"
                          name="market" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[region]"
                          dataType="wstr"
                          length="255"
                          name="region" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[postal_code]"
                          dataType="i4"
                          name="postal_code" />
                        <externalMetadataColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Source]"
                          dataType="i4"
                          name="Source" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[country]"
                          name="country" />
                        <outputColumn
                          refId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[state]"
                          name="state" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Script Component"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="13">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 statemaxid
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["state_max_id"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    int count = 0;
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        count++;
        Row.stateid = this.Variables.statemaxid + count;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 stateid
    {
        set
        {
            this[0] = value;
        }
    }
    public bool stateid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Settings.get_Default():SC_10aca06cb4f84644bed483d49146f2d3.Properties.Sett" +
    "ings")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_10aca06cb4f84644bed483d49146f2d3.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{02AF9EC2-51A2-49DE-AB40-F6010BC98DB0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_10aca06cb4f84644bed483d49146f2d3</RootNamespace>
    <AssemblyName>SC_245FFDEAB5D94454A31DE9ED1560548E</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_10aca06cb4f84644bed483d49146f2d3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_10aca06cb4f84644bed483d49146f2d3</msb:DisplayName>
    <msb:ProjectId>{2435C46C-9716-48C6-A702-81200039E641}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_10aca06cb4f84644bed483d49146f2d3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("SC_10aca06cb4f84644bed483d49146f2d3")]
[assembly: AssemblyCopyright("Copyright @ HP 2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_10aca06cb4f84644bed483d49146f2d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_10aca06cb4f84644bed483d49146f2d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_245FFDEAB5D94454A31DE9ED1560548E.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDACC4e2UAAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAA2jIA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIgyAABPAAAAAEAAAFAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA4BIAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFAEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAC8
MgAAAAAAAEgAAAACAAUA0CEAAAAQAAABAAAAAAAAANAxAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACiqeAgJ7AQAABBdYfQEAAAQDAnsD
AAAEbxAAAAYCewEAAARYbwYAAAYqHgIoCgAABioqAgMEBSgSAAAKKjoCFgOMGgAAASgTAAAKKloD
LAgCFigUAAAKKnIBAABwcxUAAAp6HgIoFgAACioeAigXAAAKKn4CKBgAAAoCAnMOAAAGfQIAAAQC
AnMPAAAGfQMAAAQqkgRyngAAcBpvGQAACiwVAgUCAygaAAAKDgRzBQAABm8MAAAGKkorBwIDbw0A
AAYDbwgAAAYt8SoGKjoCKBsAAAoCA30EAAAEKjoCKBsAAAoCA30FAAAEKpYCewUAAARvHAAACnKu
AABwbx0AAAooHgAACm8fAAAKpRoAAAEqHgIoGwAACiqufgYAAAQtHnLIAABw0AcAAAIoIAAACm8h
AAAKcyIAAAqABgAABH4GAAAEKhp+BwAABCoeAoAHAAAEKhp+CAAABCoeAigjAAAKKi5zFgAABoAI
AAAEKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIgFAAAjfgAA9AUAAAgH
AAAjU3RyaW5ncwAAAAD8DAAAPAEAACNVUwA4DgAAEAAAACNHVUlEAAAASA4AALgBAAAjQmxvYgAA
AAAAAAACAAABVxWgAQkBAAAA+gEzABYAAAEAAAAkAAAACAAAAAgAAAAXAAAADwAAACMAAAAQAAAA
BAAAAAYAAAAHAAAAAQAAAAUAAAABAAAAAABEAwEAAAAAAAYAPgLqBAYA0gLqBAYAigHXBA8AXgUA
AAYAtwHhAwYAIQLhAwYAAgLhAwYAuQLhAwYAXgLhAwYAdwLhAwYAzgHhAwYA6QENAwoAkgLXAAoA
gQTXAA4AcgTXAAoAKgTXAAoAMAbXAAYA8wWZAwYAbQHXBAYAkgQKBQYAHgTMAxIAPQEuAxIAngEu
AxIAJQG3AwYAUgHqBAYAOgCZAwYA8wOZAwYAJwOZAwYADQSZAxYAEQCiBBYAAQCiBEcArAYAABYA
IgCiBAYA+ACZAwYAqQCZAwYA/wbhAwAAAABAAAAAAAABAAEAAQAQAKwDAAAQAAEAAQABABAAZQQA
ADkAAgAFAAEAEAASBgAARQACAAoAAQAQAOcFAABJAAQADgABABAAqAUAAEkABQAPAAAAEAARBW0F
SQAGABEAAAEQANcFbQVhAAgAFQABAEAGfQAGAOcFgAAGAKgFhAABACAGiAABACAGiAARAKADjAAR
ABUBkAARAJkAlABQIAAAAADGAPACBgABAFggAAAAAMYA+wIGAAEAYCAAAAAAxgDcBpgAAQCIIAAA
AACGGMoEBgACAJAgAAAAAIYYygQbAAIAmyAAAAAAhgh+AAEABQCqIAAAAACGCGwDngAGAMEgAAAA
AIYA8wYrAAcAySAAAAAAhgD6BSsABwDRIAAAAACGGMoEBgAHAPEgAAAAAMYAiwajAAcAFiEAAAAA
xgGEBpgACwApIQAAAADGAdwGmAAMACshAAAAAIYYygStAA0AOiEAAAAAhhjKBK0ADgBJIQAAAACG
CIoAswAPAG8hAAAAAIMYygQGAA8AdyEAAAAAkwiOBLcADwCjIQAAAACTCP0AvAAPAKohAAAAAJMI
CQHBAA8AsiEAAAAAlggGBscAEAC5IQAAAACGGMoEBgAQAMEhAAAAAJEY0ATMABAAAAABAPcGAAAB
AIcEAAACALIFAAADADgEAAABAAcDAAABAAcDAAABAEkAAAACAM0AAAADAIcEAAAEADgEAAABAIcE
AAABAPcGAAABADYGAAABADYGAAABAAcDCQDKBAEAEQDKBAYAGQDKBAoAKQDKBBAAMQDKBBAAOQDK
BBAAQQDKBBAASQDKBBAAUQDKBBAAWQDKBBAAYQDKBBAAaQDKBAYAmQDKBAYAuQDKBBUAyQDKBAYA
iQDwAgYAiQD7AgYAcQDKBBsAcQCQAyUAcQB/AwEA2QDKBBAAcQDzBisAcQD6BSsAiQDKBAYA4QDg
BS8AiQDGBTYAkQDKBAYAiQCcBTwA8QCHA0EAiQDHBkcA+QCYBk0AEQG7AFQAEQH7Bl0AoQDKBGMA
wQDKBAYALgALAOcALgATAPAALgAbAA8BLgAjABgBLgArAEEBLgAzAEEBLgA7AEcBLgBDABgBLgBL
AE8BLgBTAEEBLgBbAGgBQwBjALIBiQBzAA8BqQBzAA8B4wBrALIBAQF7ALIBAwABAAYAAwAHAAQA
CAAGAAAAggDQAAAAcAPUAAAAjgDQAAAAkgTYAAAAHQHdAAAACgbiAAEABgADAAEABwAFAAIAEAAH
AAIAEgAJAAIAEwALAAEAFAALAAIAFQANAASAAAABAAAAAAAAAAAAAAAAAFEAAAAEAAAAAAAAAAAA
AABrAHUAAAAAABAAAAAAAAAAAAAAAHQARgYAAAAAEAAAAAAAAAAAAAAAdABjBgAAAAAEAAAAAAAA
AAAAAABrAJkDAAAAABAAAAAAAAAAAAAAAHQAQgQAAAAAAAAAAAEAAAAbBQAAAAAAAABJRFRTVmFy
aWFibGUxMDAASURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABJbnQzMgA8
TW9kdWxlPgBJbnB1dElEAFNDXzI0NUZGREVBQjVEOTQ0NTRBMzFERTlFRDE1NjA1NDhFAG1zY29y
bGliAHNldF9zdGF0ZWlkAGdldF9zdGF0ZW1heGlkAGRlZmF1bHRJbnN0YW5jZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBJbnB1dE5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUGlwZWxpbmUAVHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUA
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5l
cmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0
cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFz
c2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJs
eUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21w
aWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nl
bWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJp
YnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1
dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5n
AFN0cmluZwBTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfMjQ1RkZERUFCNUQ5NDQ1NEEzMURFOUVE
MTU2MDU0OEUuZGxsAHNldF9zdGF0ZWlkX0lzTnVsbABTZXROdWxsAGdldF9JdGVtAHNldF9JdGVt
AFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3Rl
bS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRp
b24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABN
aWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1
ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5SdW50aW1lLldyYXBwZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTBhY2EwNmNi
NGY4NDY0NGJlZDQ4M2Q0OTE0NmYyZDMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERl
YnVnZ2luZ01vZGVzAFNDXzEwYWNhMDZjYjRmODQ2NDRiZWQ0ODNkNDkxNDZmMmQzLlByb3BlcnRp
ZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5k
ZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0AGdldF9E
ZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABjb3Vu
dABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxp
bmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21w
b25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vzc0lucHV0
Um93AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5
ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMA
aQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBz
AHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAABlzAHQAYQB0AGUAXwBtAGEAeABfAGkAZAAAcVMA
QwBfADEAMABhAGMAYQAwADYAYwBiADQAZgA4ADQANgA0ADQAYgBlAGQANAA4ADMAZAA0ADkAMQA0
ADYAZgAyAGQAMwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAADq
pMVF+8/qQa1z4oe9kxHQAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFZCSADARI9HQgSQQUgAgEI
HAMgAAIGIAICDhF1BSABHQgIBCAAEnkFIAESfRwFAAASgIEGIAEcEoCFCAABEoCJEYCNBSAAEoCR
ByACAQ4SgJEIt3pcVhk04IkIiYRdzYCAzJECBggDBhIUAwYSGAMGEkUDBhJRAwYSVQMGEiAFIAEB
EgwEIAEBAgkgBAEIDhI9EkEFIAEBEkUDIAAIBAAAElEEAAASVQUAAQESVQQAABIgAwAAAQMoAAgD
KAACBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQgBAAIAAAAAACgBACNTQ18xMGFjYTA2Y2I0Zjg0NjQ0YmVkNDgzZDQ5MTQ2ZjJkMwAABQEAAAAA
BwEAAkhQAAAYAQATQ29weXJpZ2h0IEAgSFAgMjAyMwAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lv
bj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcEAQAAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAAsDIAAAAAAAAAAAAAyjIAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALwyAAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAAD0AwAAAAAAAAAAAAD0AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAEVAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAMAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACYAAwABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAASABQAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgAAAAAAUwBDAF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBk
ADQAOQAxADQANgBmADIAZAAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4A
MAAuADAALgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAyADQANQBG
AEYARABFAEEAQgA1AEQAOQA0ADQANQA0AEEAMwAxAEQARQA5AEUARAAxADUANgAwADUANAA4AEUA
LgBkAGwAbAAAAEwAFAABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgAEgAUAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AEMAXwAyADQANQBGAEYARABFAEEAQgA1AEQAOQA0ADQANQA0AEEAMwAxAEQARQA5AEUARAAxADUA
NgAwADUANAA4AEUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBD
AF8AMQAwAGEAYwBhADAANgBjAGIANABmADgANAA2ADQANABiAGUAZAA0ADgAMwBkADQAOQAxADQA
NgBmADIAZAAzAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw
AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA
LgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA3DIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_245ffdeab5d94454a31de9ed1560548e</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::state_max_id</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">AB</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\State\State\Script Component.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Script Component.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\State\State\Script Component.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Script Component.Outputs[Output 0].Columns[stateid]"
                          dataType="i4"
                          lineageId="Package\State\State\Script Component.Outputs[Output 0].Columns[stateid]"
                          name="stateid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\State\State\Sort"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\State\State\Sort.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\State\State\Sort.Inputs[Sort Input].Columns[country]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="country"
                          lineageId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[country]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\State\State\Sort.Inputs[Sort Input].Columns[state]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="state"
                          lineageId="Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[state]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\State\State\Sort.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\State\State\Sort.Outputs[Sort Output].Columns[country]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\Sort.Outputs[Sort Output].Columns[country]"
                          name="country">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[country]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\State\State\Sort.Outputs[Sort Output].Columns[state]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\State\State\Sort.Outputs[Sort Output].Columns[state]"
                          name="state"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\State\State\Aggregate.Outputs[Aggregate Output 1].Columns[state]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\State\State.Paths[Aggregate Output 1]"
                  endId="Package\State\State\Sort.Inputs[Sort Input]"
                  name="Aggregate Output 1"
                  startId="Package\State\State\Aggregate.Outputs[Aggregate Output 1]" />
                <path
                  refId="Package\State\State.Paths[Derived Column Output]"
                  endId="Package\State\State\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\State\State\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\State\State.Paths[Derived Column Output1]"
                  endId="Package\State\State\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\State\State\Add create &amp; update dates.Outputs[Derived Column Output]" />
                <path
                  refId="Package\State\State.Paths[Lookup Match Output]"
                  endId="Package\State\State\Lookup.Inputs[Lookup Input]"
                  name="Lookup Match Output"
                  startId="Package\State\State\Check if exist country.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\State\State.Paths[Lookup No Match Output]"
                  endId="Package\State\State\Script Component.Inputs[Input 0]"
                  name="Lookup No Match Output"
                  startId="Package\State\State\Lookup.Outputs[Lookup No Match Output]" />
                <path
                  refId="Package\State\State.Paths[OLE DB Source Output]"
                  endId="Package\State\State\Aggregate.Inputs[Aggregate Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\State\State\OLE DB Source.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\State\State.Paths[Output 0]"
                  endId="Package\State\State\Add create &amp; update dates.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\State\State\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\State\State.Paths[Sort Output]"
                  endId="Package\State\State\Derived Column.Inputs[Derived Column Input]"
                  name="Sort Output"
                  startId="Package\State\State\Sort.Outputs[Sort Output]" />
                <path
                  refId="Package\State\State.Paths[StateNotNULL]"
                  endId="Package\State\State\Check if exist country.Inputs[Lookup Input]"
                  name="StateNotNULL"
                  startId="Package\State\State\Conditional Split.Outputs[StateNotNULL]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\State.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{3AB9DC8D-EBC6-464A-86F5-F5FB52E48665}"
          DTS:From="Package\State\Find max id of State"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\State\State" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{4B8E7E2B-C980-4712-8393-2EC9AD612FD4}"
      DTS:From="Package\Market &amp; Region &amp; Country"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\State" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{E7A0048D-7D06-48CA-B33C-263F9CA45D6D}"
      DTS:From="Package\State"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\City" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{0E6F8670-F336-4283-9029-7CBDB158CBD5}"
      DTS:From="Package\City"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Postal Code" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="97,42"
          Id="Package\City\City"
          TopLeft="49,84.5" />
        <NodeLayout
          Size="167,42"
          Id="Package\City\Find max id of City"
          TopLeft="13,5.5" />
        <EdgeLayout
          Id="Package\City.PrecedenceConstraints[Constraint 4]"
          TopLeft="97,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,37"
              Start="0,0"
              End="0,29.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="205,140"
          Size="205,183"
          Id="Package\City"
          TopLeft="296,565" />
        <NodeLayout
          Size="116,42"
          Id="Package\Market &amp; Region &amp; Country\Country"
          TopLeft="527.5,83" />
        <NodeLayout
          Size="186,42"
          Id="Package\Market &amp; Region &amp; Country\Find max id of Country"
          TopLeft="494.5,18" />
        <NodeLayout
          Size="182,42"
          Id="Package\Market &amp; Region &amp; Country\Find max id of Market"
          TopLeft="10.5,14" />
        <NodeLayout
          Size="182,42"
          Id="Package\Market &amp; Region &amp; Country\Find max id of Region"
          TopLeft="243.5,16" />
        <NodeLayout
          Size="111,42"
          Id="Package\Market &amp; Region &amp; Country\Market"
          TopLeft="43.5,85" />
        <NodeLayout
          Size="111,42"
          Id="Package\Market &amp; Region &amp; Country\Region"
          TopLeft="284.5,86" />
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint]"
          TopLeft="100.25,56">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29"
              Start="0,0"
              End="0,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint 1]"
          TopLeft="337.25,58">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28"
              Start="0,0"
              End="0,20.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country.PrecedenceConstraints[Constraint 2]"
          TopLeft="586.5,60">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="692,153"
          Size="692,196"
          Id="Package\Market &amp; Region &amp; Country"
          TopLeft="65,56" />
        <NodeLayout
          Size="205,42"
          Id="Package\Postal Code\Find max id of Postal Code"
          TopLeft="5.5,5.5" />
        <NodeLayout
          Size="134,42"
          Id="Package\Postal Code\Postal Code"
          TopLeft="33.5,78.5" />
        <EdgeLayout
          Id="Package\Postal Code.PrecedenceConstraints[Constraint 5]"
          TopLeft="104.25,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31"
              Start="0,0"
              End="0,23.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="216,136"
          Size="216,179"
          Id="Package\Postal Code"
          TopLeft="290,813" />
        <NodeLayout
          Size="174,42"
          Id="Package\State\Find max id of State"
          TopLeft="18,5.5" />
        <NodeLayout
          Size="103,42"
          Id="Package\State\State"
          TopLeft="46,82.5" />
        <EdgeLayout
          Id="Package\State.PrecedenceConstraints[Constraint 3]"
          TopLeft="101.25,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="205,141"
          Size="205,184"
          Id="Package\State"
          TopLeft="301,312" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="407.25,252">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="401,496">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,69"
              Start="0,0"
              End="0,61.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,61.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="398.25,748">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,65"
              Start="0,0"
              End="0,57.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,57.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\City\City">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="154,42"
          Id="Package\City\City\Derived Column"
          TopLeft="467,311.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\City\City\OLE DB Destination"
          TopLeft="5.50000000000011,1025.5" />
        <NodeLayout
          Size="168,42"
          Id="Package\City\City\Check if exist state"
          TopLeft="460,617.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\City\City\Conditional Split"
          TopLeft="466.5,413.5" />
        <NodeLayout
          Size="150,42"
          Id="Package\City\City\OLE DB Source"
          TopLeft="469,5.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\City\City\Sort"
          TopLeft="495,209.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\City\City\Lookup"
          TopLeft="487.5,719.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\City\City\Aggregate"
          TopLeft="480.5,107.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\City\City\Script Component"
          TopLeft="238.5,821.5" />
        <NodeLayout
          Size="180,42"
          Id="Package\City\City\Check if exist country"
          TopLeft="454,515.5" />
        <NodeLayout
          Size="205,42"
          Id="Package\City\City\Add create &amp; update dates"
          TopLeft="173.5,923.5" />
        <EdgeLayout
          Id="Package\City\City.Paths[StateNotNULL]"
          TopLeft="544,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-28.449453125,20.54296875,56.89890625,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Sort Output]"
          TopLeft="544,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Output 0]"
          TopLeft="320,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-43.9999999999999,60.0000000000001"
              Start="0,0"
              End="-43.9999999999999,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.0000000000001"
                    Point2="0,30.0000000000001"
                    Point3="-4,30.0000000000001" />
                  <mssgle:LineSegment
                    End="-39.9999999999999,30.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="-39.9999999999999,30.0000000000001"
                    Point2="-43.9999999999999,30.0000000000001"
                    Point3="-43.9999999999999,34.0000000000001" />
                  <mssgle:LineSegment
                    End="-43.9999999999999,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[OLE DB Source Output]"
          TopLeft="544,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Lookup No Match Output]"
          TopLeft="526.5,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Lookup Match Output1]"
          TopLeft="544,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Lookup Match Output]"
          TopLeft="544,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Derived Column Output1]"
          TopLeft="276,965.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,59.9999999999999"
              Start="0,0"
              End="-185,52.4999999999999">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.9999999999999" />
                  <mssgle:CubicBezierSegment
                    Point1="0,25.9999999999999"
                    Point2="0,29.9999999999999"
                    Point3="-4,29.9999999999999" />
                  <mssgle:LineSegment
                    End="-181,29.9999999999999" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,29.9999999999999"
                    Point2="-185,29.9999999999999"
                    Point3="-185,33.9999999999999" />
                  <mssgle:LineSegment
                    End="-185,52.4999999999999" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Derived Column Output]"
          TopLeft="544,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\City\City.Paths[Aggregate Output 1]"
          TopLeft="544,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\City\City\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\City\City\Check if exist state">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_State]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\City\City\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\City\City\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_City]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\City\City\Check if exist country">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Country]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Market &amp; Region &amp; Country\Country">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="150,42"
          Id="Package\Market &amp; Region &amp; Country\Country\OLE DB Source"
          TopLeft="469,5.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Sort"
          TopLeft="495,209.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Script Component"
          TopLeft="238.5,617.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Aggregate"
          TopLeft="480.5,107.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Lookup"
          TopLeft="487.5,515.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination"
          TopLeft="5.5,821.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Derived Column"
          TopLeft="467,311.5" />
        <NodeLayout
          Size="205,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Add create &amp; update dates"
          TopLeft="173.5,719.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Market &amp; Region &amp; Country\Country\Conditional Split"
          TopLeft="466.5,413.5" />
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Derived Column Output1]"
          TopLeft="276,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,60"
              Start="0,0"
              End="-185,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-181,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,30"
                    Point2="-185,30"
                    Point3="-185,34" />
                  <mssgle:LineSegment
                    End="-185,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Derived Column Output]"
          TopLeft="544,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Aggregate Output 1]"
          TopLeft="544,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Sort Output]"
          TopLeft="544,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[RegionNotNULL]"
          TopLeft="544,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-37.399453125,20.54296875,74.79890625,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Output 0]"
          TopLeft="320,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-43.9999999999999,60.0000000000001"
              Start="0,0"
              End="-43.9999999999999,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.0000000000001"
                    Point2="0,30.0000000000001"
                    Point3="-4,30.0000000000001" />
                  <mssgle:LineSegment
                    End="-39.9999999999999,30.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="-39.9999999999999,30.0000000000001"
                    Point2="-43.9999999999999,30.0000000000001"
                    Point3="-43.9999999999999,34.0000000000001" />
                  <mssgle:LineSegment
                    End="-43.9999999999999,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[OLE DB Source Output]"
          TopLeft="544,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Country.Paths[Lookup No Match Output]"
          TopLeft="526.5,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Country\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Country\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Country]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Country\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Market &amp; Region &amp; Country\Market">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="171,42"
          Id="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination"
          TopLeft="5.5,821.5" />
        <NodeLayout
          Size="150,42"
          Id="Package\Market &amp; Region &amp; Country\Market\OLE DB Source"
          TopLeft="469,5.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Aggregate"
          TopLeft="480.5,107.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Conditional Split"
          TopLeft="466.5,413.5" />
        <NodeLayout
          Size="133,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Trim values"
          TopLeft="477.5,311.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Lookup"
          TopLeft="487.5,515.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Script Component"
          TopLeft="238.5,617.5" />
        <NodeLayout
          Size="217,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Add created &amp; updated dates"
          TopLeft="161.5,719.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\Market &amp; Region &amp; Country\Market\Sort"
          TopLeft="495,209.5" />
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Derived Column Output1]"
          TopLeft="270,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-179,60"
              Start="0,0"
              End="-179,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-175,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-175,30"
                    Point2="-179,30"
                    Point3="-179,34" />
                  <mssgle:LineSegment
                    End="-179,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Derived Column Output]"
          TopLeft="544,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Aggregate Output 1]"
          TopLeft="544,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Sort Output]"
          TopLeft="544,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Output 0]"
          TopLeft="320,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-50,60"
              Start="0,0"
              End="-50,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-46,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-46,30"
                    Point2="-50,30"
                    Point3="-50,34" />
                  <mssgle:LineSegment
                    End="-50,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[OLE DB Source Output]"
          TopLeft="544,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[MarketNotNULL]"
          TopLeft="544,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-35.00193359375,21.37548828125,70.0038671875,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Market.Paths[Lookup No Match Output]"
          TopLeft="526.5,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Market\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Market\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Market\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Market]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Market &amp; Region &amp; Country\Region">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="150,42"
          Id="Package\Market &amp; Region &amp; Country\Region\OLE DB Source"
          TopLeft="469,5.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Script Component"
          TopLeft="238.5,617.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Aggregate"
          TopLeft="480.5,107.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Lookup"
          TopLeft="487.5,515.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Sort"
          TopLeft="495,209.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Derived Column"
          TopLeft="467,311.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination"
          TopLeft="5.5,821.5" />
        <NodeLayout
          Size="205,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Add create &amp; update dates"
          TopLeft="173.5,719.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Market &amp; Region &amp; Country\Region\Conditional Split"
          TopLeft="466.5,413.5" />
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[RegionNotNULL]"
          TopLeft="544,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-35.08193359375,20.5576171875,70.1638671875,11.384765625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Output 0]"
          TopLeft="320,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-43.9999999999999,60.0000000000001"
              Start="0,0"
              End="-43.9999999999999,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.0000000000001"
                    Point2="0,30.0000000000001"
                    Point3="-4,30.0000000000001" />
                  <mssgle:LineSegment
                    End="-39.9999999999999,30.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="-39.9999999999999,30.0000000000001"
                    Point2="-43.9999999999999,30.0000000000001"
                    Point3="-43.9999999999999,34.0000000000001" />
                  <mssgle:LineSegment
                    End="-43.9999999999999,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[OLE DB Source Output]"
          TopLeft="544,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Lookup No Match Output]"
          TopLeft="526.5,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Derived Column Output1]"
          TopLeft="276,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,60"
              Start="0,0"
              End="-185,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-181,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,30"
                    Point2="-185,30"
                    Point3="-185,34" />
                  <mssgle:LineSegment
                    End="-185,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Derived Column Output]"
          TopLeft="544,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Aggregate Output 1]"
          TopLeft="544,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Market &amp; Region &amp; Country\Region.Paths[Sort Output]"
          TopLeft="544,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Region\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Region\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Region]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Market &amp; Region &amp; Country\Region\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Postal Code\Postal Code">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="169,42"
          Id="Package\Postal Code\Postal Code\Check if exist State"
          TopLeft="459.5,617.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Postal Code\Postal Code\Derived Column"
          TopLeft="467,311.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Postal Code\Postal Code\OLE DB Destination"
          TopLeft="5.50000000000011,1127.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Postal Code\Postal Code\Conditional Split"
          TopLeft="466.5,413.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\Postal Code\Postal Code\Lookup"
          TopLeft="487.5,821.5" />
        <NodeLayout
          Size="150,42"
          Id="Package\Postal Code\Postal Code\OLE DB Source"
          TopLeft="469,5.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Postal Code\Postal Code\Derived Column 2"
          TopLeft="462.5,923.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\Postal Code\Postal Code\Script Component"
          TopLeft="238.5,923.5" />
        <NodeLayout
          Size="209,42"
          Id="Package\Postal Code\Postal Code\Slowly Changing Dimension"
          TopLeft="439.5,1025.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Postal Code\Postal Code\Aggregate"
          TopLeft="480.5,107.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\Postal Code\Postal Code\Sort"
          TopLeft="495,209.5" />
        <NodeLayout
          Size="162,42"
          Id="Package\Postal Code\Postal Code\Check if exist City"
          TopLeft="463,719.5" />
        <NodeLayout
          Size="182,42"
          Id="Package\Postal Code\Postal Code\Check if exist Country"
          TopLeft="453,515.5" />
        <NodeLayout
          Size="205,42"
          Id="Package\Postal Code\Postal Code\Add create &amp; update dates"
          TopLeft="173.5,1025.5" />
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Sort Output]"
          TopLeft="544,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[PostalCodeNotNULL]"
          TopLeft="544,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-44.18693359375,21.37548828125,88.3738671875,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Output 0]"
          TopLeft="320,965.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-43.9999999999999,60"
              Start="0,0"
              End="-43.9999999999999,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-39.9999999999999,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-39.9999999999999,30"
                    Point2="-43.9999999999999,30"
                    Point3="-43.9999999999999,34" />
                  <mssgle:LineSegment
                    End="-43.9999999999999,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[OLE DB Source Output]"
          TopLeft="544,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Lookup No Match Output]"
          TopLeft="526.5,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Lookup Match Output3]"
          TopLeft="544,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Lookup Match Output2]"
          TopLeft="544,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Lookup Match Output1]"
          TopLeft="544,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Lookup Match Output]"
          TopLeft="561.5,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-17.5,60"
              Start="0,0"
              End="-17.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-13.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-13.5,24.5026178010471"
                    Point2="-17.5,24.5026178010471"
                    Point3="-17.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-17.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-56.94138671875,29.5026178010471,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Derived Column Output2]"
          TopLeft="544,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Derived Column Output1]"
          TopLeft="544,965.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Derived Column Output]"
          TopLeft="276,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,60"
              Start="0,0"
              End="-185,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-181,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,30"
                    Point2="-185,30"
                    Point3="-185,34" />
                  <mssgle:LineSegment
                    End="-185,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Aggregate Output 1]"
          TopLeft="544,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="163,42"
          Id="Package\Postal Code\Postal Code\Insert Destination"
          TopLeft="237.5,1127.5" />
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[New Output]"
          TopLeft="493.75,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-174.75,60"
              Start="0,0"
              End="-174.75,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.503937007874" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.503937007874"
                    Point2="0,20.503937007874"
                    Point3="-4,20.503937007874" />
                  <mssgle:LineSegment
                    End="-170.75,20.503937007874" />
                  <mssgle:CubicBezierSegment
                    Point1="-170.75,20.503937007874"
                    Point2="-174.75,20.503937007874"
                    Point3="-174.75,24.503937007874" />
                  <mssgle:LineSegment
                    End="-174.75,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-114.46638671875,25.503937007874,54.1827734375,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="166,42"
          Id="Package\Postal Code\Postal Code\OLE DB Command"
          TopLeft="461,1127.5" />
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Inferred Member Updates Output]"
          TopLeft="544,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-74.40298828125,20.4208984375,148.8059765625,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="175,42"
          Id="Package\Postal Code\Postal Code\OLE DB Command 1"
          TopLeft="687.5,1127.5" />
        <EdgeLayout
          Id="Package\Postal Code\Postal Code.Paths[Changing Attribute Updates Output]"
          TopLeft="594.25,1067.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="180.75,60"
              Start="0,0"
              End="180.75,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.503937007874" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.503937007874"
                    Point2="0,20.503937007874"
                    Point3="4,20.503937007874" />
                  <mssgle:LineSegment
                    End="176.75,20.503937007874" />
                  <mssgle:CubicBezierSegment
                    Point1="176.75,20.503937007874"
                    Point2="180.75,20.503937007874"
                    Point3="180.75,24.503937007874" />
                  <mssgle:LineSegment
                    End="180.75,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="11.84109375,25.503937007874,157.0678125,11.6630859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\Check if exist State">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_State]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:boolean">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_PostalCode]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\Slowly Changing Dimension">
    <Properties>
      <Property>
        <Name>SCDMetadata</Name>
        <Value
          type="q2:string">&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;SCDWizardMetadata xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;ConnectionID&gt;{97923543-993D-4C1A-910C-9D7C63BE69C8}&lt;/ConnectionID&gt;
  &lt;TableName&gt;[dbo].[NDS_PostalCode]&lt;/TableName&gt;
  &lt;InputToColumnsCollection&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Check if exist City.Outputs[Lookup Match Output].Columns[city_id_lookedup]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;city_id&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;ChangingAttribute&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Check if exist City.Outputs[Lookup Match Output].Columns[country_id_lookedup]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;country_id&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;ChangingAttribute&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Lookup.Outputs[Lookup Match Output].Columns[created_date]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;created_date&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;None&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Lookup.Outputs[Lookup Match Output].Columns[id]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;id&lt;/ColumnName&gt;
      &lt;KeyType&gt;BusinessKey&lt;/KeyType&gt;
      &lt;ChangeType&gt;None&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Sort.Outputs[Sort Output].Columns[postal_code]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;postal_code&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;None&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Check if exist City.Outputs[Lookup Match Output].Columns[state_id_lookedup]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;state_id&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;ChangingAttribute&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
    &lt;InputColumnToDBColumn&gt;
      &lt;IdentificationString&gt;Derived Column 2.Outputs[Derived Column Output].Columns[updated_Date]&lt;/IdentificationString&gt;
      &lt;ColumnName&gt;updated_date&lt;/ColumnName&gt;
      &lt;KeyType&gt;None&lt;/KeyType&gt;
      &lt;ChangeType&gt;None&lt;/ChangeType&gt;
    &lt;/InputColumnToDBColumn&gt;
  &lt;/InputToColumnsCollection&gt;
  &lt;GeneratedComponentsIdentificationStrings&gt;
    &lt;anyType xsi:type="xsd:string"&gt;Insert Destination&lt;/anyType&gt;
    &lt;anyType xsi:type="xsd:string"&gt;OLE DB Command&lt;/anyType&gt;
    &lt;anyType xsi:type="xsd:string"&gt;OLE DB Command 1&lt;/anyType&gt;
  &lt;/GeneratedComponentsIdentificationStrings&gt;
  &lt;FailFixedAttribute&gt;false&lt;/FailFixedAttribute&gt;
  &lt;FailChangeAttribute&gt;false&lt;/FailChangeAttribute&gt;
  &lt;UseStartEndDate&gt;false&lt;/UseStartEndDate&gt;
  &lt;CurrentIndicatorColumn /&gt;
  &lt;InferredIndicatorColumn /&gt;
  &lt;ValueCurrent /&gt;
  &lt;ValueExpired /&gt;
  &lt;StartDateColumn /&gt;
  &lt;EndDateColumn /&gt;
  &lt;DateVariable /&gt;
  &lt;EnableInferredSupport&gt;true&lt;/EnableInferredSupport&gt;
&lt;/SCDWizardMetadata&gt;</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\Check if exist City">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_City]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Postal Code\Postal Code\Check if exist Country">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Country]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\State\State">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="180,42"
          Id="Package\State\State\Check if exist country"
          TopLeft="460,515.5" />
        <NodeLayout
          Size="98,42"
          Id="Package\State\State\Sort"
          TopLeft="501,209.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\State\State\Derived Column"
          TopLeft="473,311.5" />
        <NodeLayout
          Size="163,42"
          Id="Package\State\State\Script Component"
          TopLeft="244.5,719.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\State\State\Aggregate"
          TopLeft="486.5,107.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\State\State\Conditional Split"
          TopLeft="472.5,413.5" />
        <NodeLayout
          Size="113,42"
          Id="Package\State\State\Lookup"
          TopLeft="493.5,617.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\State\State\OLE DB Destination"
          TopLeft="11.5000000000001,923.5" />
        <NodeLayout
          Size="205,42"
          Id="Package\State\State\Add create &amp; update dates"
          TopLeft="179.5,821.5" />
        <NodeLayout
          Size="150,42"
          Id="Package\State\State\OLE DB Source"
          TopLeft="475,5.5" />
        <EdgeLayout
          Id="Package\State\State.Paths[StateNotNULL]"
          TopLeft="550,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-31.49259765625,21.47314453125,62.9851953125,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Sort Output]"
          TopLeft="550,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Output 0]"
          TopLeft="326,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-43.9999999999999,60.0000000000001"
              Start="0,0"
              End="-43.9999999999999,52.5000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.0000000000001"
                    Point2="0,30.0000000000001"
                    Point3="-4,30.0000000000001" />
                  <mssgle:LineSegment
                    End="-39.9999999999999,30.0000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="-39.9999999999999,30.0000000000001"
                    Point2="-43.9999999999999,30.0000000000001"
                    Point3="-43.9999999999999,34.0000000000001" />
                  <mssgle:LineSegment
                    End="-43.9999999999999,52.5000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[OLE DB Source Output]"
          TopLeft="550,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Lookup No Match Output]"
          TopLeft="532.5,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-206.5,60"
              Start="0,0"
              End="-206.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5026178010471"
                    Point2="0,24.5026178010471"
                    Point3="-4,24.5026178010471" />
                  <mssgle:LineSegment
                    End="-202.5,24.5026178010471" />
                  <mssgle:CubicBezierSegment
                    Point1="-202.5,24.5026178010471"
                    Point2="-206.5,24.5026178010471"
                    Point3="-206.5,28.5026178010471" />
                  <mssgle:LineSegment
                    End="-206.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-159.05638671875,29.5026178010471,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Lookup Match Output]"
          TopLeft="550,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-48.19138671875,20.4453125,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Derived Column Output1]"
          TopLeft="282,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,60"
              Start="0,0"
              End="-185,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26"
                    Point2="0,30"
                    Point3="-4,30" />
                  <mssgle:LineSegment
                    End="-181,30" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,30"
                    Point2="-185,30"
                    Point3="-185,34" />
                  <mssgle:LineSegment
                    End="-185,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Derived Column Output]"
          TopLeft="550,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\State\State.Paths[Aggregate Output 1]"
          TopLeft="550,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\State\State\Check if exist country">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_Country]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\State\State\Lookup">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:boolean">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[NDS_State]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\State\State\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\State\State\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>